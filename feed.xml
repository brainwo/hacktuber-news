<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
	<channel>
		<title>Hacktuber News</title>
		<link>https://brainwo.github.io/hacktubernews</link>
		<description>Aggregate blog posts discussed in tech YouTube videos.</description>
			<item>
			<title>React Compiler – React</title>
			<description>This page will give you an introduction to the new experimental React Compiler and how to try it out successfully. Under ConstructionThese docs are still a work in progress. More documentation is available in...</description>
			<link>https://react.dev/learn/react-compiler</link>
			<content:encoded><![CDATA[<div><p>This page will give you an introduction to the new experimental React Compiler and how to try it out successfully.</p>
<div><h3><svg width="2em" height="2em"></svg>Under Construction</h3><div><p>These docs are still a work in progress. More documentation is available in the <a href="https://github.com/reactwg/react-compiler/discussions" target="_blank">React Compiler Working Group repo</a>, and will be upstreamed into these docs when they are more stable.</p></div></div>
<div><h3>You will learn</h3><ul>
<li>Getting started with the compiler</li>
<li>Installing the compiler and eslint plugin</li>
<li>Troubleshooting</li>
</ul></div>
<div><h3><svg width="2em" height="2em"></svg>Note</h3><div><p>React Compiler is a new experimental compiler that we’ve open sourced to get early feedback from the community. It still has rough edges and is not yet fully ready for production.</p><p>React Compiler requires React 19 Beta.</p></div></div>
<p>React Compiler is a new experimental compiler that we’ve open sourced to get early feedback from the community. It is a build-time only tool that automatically optimizes your React app. It works with plain JavaScript, and understands the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a>, so you don’t need to rewrite any code to use it.</p>
<p>The compiler also includes an <a target="_blank" href="https://react.dev/learn/react-compiler#installing-eslint-plugin-react-compiler">eslint plugin</a> that surfaces the analysis from the compiler right in your editor. The plugin runs independently of the compiler and can be used even if you aren’t using the compiler in your app. We recommend all React developers to use this eslint plugin to help improve the quality of your codebase.</p>
<h3 id="what-does-the-compiler-do">What does the compiler do? <a target="_blank" href="https://react.dev/learn/react-compiler#what-does-the-compiler-do" title="Link for What does the compiler do? "><svg width="1em" height="1em"></svg></a></h3>
<p>The compiler understands your code at a deep level through its understanding of plain JavaScript semantics and the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a>. This allows it to add automatic optimizations to your code.</p>
<p>You may be familiar today with manual memoization through <a target="_blank" href="https://react.dev/reference/react/useMemo"><code>useMemo</code></a>, <a target="_blank" href="https://react.dev/reference/react/useCallback"><code>useCallback</code></a>, and <a target="_blank" href="https://react.dev/reference/react/memo"><code>React.memo</code></a>. The compiler can automatically do this for you, if your code follows the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a>. If it detects breakages of the rules, it will automatically skip over just those components or hooks, and continue safely compiling other code.</p>
<p>If your codebase is already very well memoized, you might not expect to see major performance improvements with the compiler. However, in practice memoizing the correct dependencies that cause performance issues is tricky to get right by hand.</p>
<h3 id="should-i-try-out-the-compiler">Should I try out the compiler? <a target="_blank" href="https://react.dev/learn/react-compiler#should-i-try-out-the-compiler" title="Link for Should I try out the compiler? "><svg width="1em" height="1em"></svg></a></h3>
<p>Please note that the compiler is still experimental and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a>.</p>
<p><strong>You don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it.</strong> However, we do appreciate trying it out in small experiments in your apps so that you can <a target="_blank" href="https://react.dev/learn/react-compiler#reporting-issues">provide feedback</a> to us to help make the compiler better.</p>
<h2 id="getting-started">Getting Started <a target="_blank" href="https://react.dev/learn/react-compiler#getting-started" title="Link for Getting Started "><svg width="1em" height="1em"></svg></a></h2>
<p>In addition to these docs, we recommend checking the <a href="https://github.com/reactwg/react-compiler" target="_blank">React Compiler Working Group</a> for additional information and discussion about the compiler.</p>
<h3 id="using-the-compiler-effectively">Rolling out the compiler to your codebase <a target="_blank" href="https://react.dev/learn/react-compiler#using-the-compiler-effectively" title="Link for Rolling out the compiler to your codebase "><svg width="1em" height="1em"></svg></a></h3>
<h4 id="existing-projects">Existing projects <a target="_blank" href="https://react.dev/learn/react-compiler#existing-projects" title="Link for Existing projects "><svg width="1em" height="1em"></svg></a></h4>
<p>The compiler is designed to compile functional components and hooks that follows the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a>. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.</p>
<p>For this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do by configuring the compiler to only run on specific set of directories:</p>
<div><pre><code><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span><br /></p><p><span>sources</span><span>:</span> <span>(</span><span>filename</span><span>)</span> <span>=&gt;</span> <span>{</span><br /></p><p><span>return</span> <span>filename</span>.<span>indexOf</span><span>(</span><span>'src/path/to/dir'</span><span>)</span> !== -<span>1</span><span>;</span><br /></p><p><span>}</span><span>,</span><br /></p><p><span>}</span><span>;</span></p></code></pre></div>
<p>In rare cases, you can also configure the compiler to run in “opt-in” mode using the <code>compilationMode: "annotation"</code> option. This makes it so the compiler will only compile components and hooks annotated with a <code>"use memo"</code> directive. Please note that the <code>annotation</code> mode is a temporary one to aid early adopters, and that we don’t intend for the <code>"use memo"</code> directive to be used for the long term.</p>
<div><pre><code><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span><br /></p><p><span>compilationMode</span><span>:</span> <span>"annotation"</span><span>,</span><br /></p><p><span>}</span><span>;</span><br /></p><p><span>// src/app.jsx</span><br /></p><p><span>export</span> <span>default</span> <span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span><br /></p><p><span>"use memo"</span><span>;</span><br /></p><p><span>// ...</span><br /></p><p><span>}</span></p></code></pre></div>
<p>When you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app.</p>
<h4 id="new-projects">New projects <a target="_blank" href="https://react.dev/learn/react-compiler#new-projects" title="Link for New projects "><svg width="1em" height="1em"></svg></a></h4>
<p>If you’re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior.</p>
<h2 id="installation">Installation <a target="_blank" href="https://react.dev/learn/react-compiler#installation" title="Link for Installation "><svg width="1em" height="1em"></svg></a></h2>
<h3 id="checking-compatibility">Checking compatibility <a target="_blank" href="https://react.dev/learn/react-compiler#checking-compatibility" title="Link for Checking compatibility "><svg width="1em" height="1em"></svg></a></h3>
<p>Prior to installing the compiler, you can first check to see if your codebase is compatible:</p>
<div><p>npx react-compiler-healthcheck</p></div>
<p>This script will:</p>
<ul>
<li>Check how many components can be successfully optimized: higher is better</li>
<li>Check for <code>&lt;StrictMode&gt;</code> usage: having this enabled and followed means a higher chance that the <a target="_blank" href="https://react.dev/reference/rules">Rules of React</a> are followed</li>
<li>Check for incompatible library usage: known libaries that are incompatible with the compiler</li>
</ul>
<p>As an example:</p>
<div><p>Successfully compiled 8 out of 9 components.
StrictMode usage not found.
Found no usage of incompatible libraries.</p></div>
<h3 id="installing-eslint-plugin-react-compiler">Installing eslint-plugin-react-compiler <a target="_blank" href="https://react.dev/learn/react-compiler#installing-eslint-plugin-react-compiler" title="Link for Installing eslint-plugin-react-compiler "><svg width="1em" height="1em"></svg></a></h3>
<p>React Compiler also powers an eslint plugin. The eslint plugin can be used <strong>independently</strong> of the compiler, meaning you can use the eslint plugin even if you don’t use the compiler.</p>
<div><p>npm install eslint-plugin-react-compiler</p></div>
<p>Then, add it to your eslint config:</p>
<div><pre><code><p><span>module</span>.<span>exports</span> = <span>{</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>'eslint-plugin-react-compiler'</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>rules</span><span>:</span> <span>{</span><br /></p><p><span>'react-compiler/react-compiler'</span><span>:</span> <span>2</span><span>,</span><br /></p><p><span>}</span><span>,</span><br /></p><p><span>}</span></p></code></pre></div>
<h3 id="usage-with-babel">Usage with Babel <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-babel" title="Link for Usage with Babel "><svg width="1em" height="1em"></svg></a></h3>
<div><p>npm install babel-plugin-react-compiler</p></div>
<p>The compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.</p>
<p>After installing, add it to your Babel config. Please note that it’s critical that the compiler run <strong>first</strong> in the pipeline:</p>
<div><pre><code><p><span>// babel.config.js</span><br /></p><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span> <span>/* ... */</span> <span>}</span><span>;</span><br /></p><p><span>module</span>.<span>exports</span> = <span>function</span> <span>(</span><span>)</span> <span>{</span><br /></p><p><span>return</span> <span>{</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>[</span><span>'babel-plugin-react-compiler'</span><span>,</span> <span>ReactCompilerConfig</span><span>]</span><span>,</span> <span>// must run first!</span><br /></p><p><span>// ...</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>}</span><span>;</span><br /></p><p><span>}</span><span>;</span></p></code></pre></div>
<p><code>babel-plugin-react-compiler</code> should run first before other Babel plugins as the compiler requires the input source information for sound analysis.</p>
<h3 id="usage-with-vite">Usage with Vite <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-vite" title="Link for Usage with Vite "><svg width="1em" height="1em"></svg></a></h3>
<p>If you use Vite, you can add the plugin to vite-plugin-react:</p>
<div><pre><code><p><span>// vite.config.js</span><br /></p><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span> <span>/* ... */</span> <span>}</span><span>;</span><br /></p><p><span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span><br /></p><p><span>return</span> <span>{</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>react</span><span>(</span><span>{</span><br /></p><p><span>babel</span><span>:</span> <span>{</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>[</span><span>"babel-plugin-react-compiler"</span><span>,</span> <span>ReactCompilerConfig</span><span>]</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>}</span><span>,</span><br /></p><p><span>}</span><span>)</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>// ...</span><br /></p><p><span>}</span><span>;</span><br /></p><p><span>}</span><span>)</span><span>;</span></p></code></pre></div>
<h3 id="usage-with-nextjs">Usage with Next.js <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-nextjs" title="Link for Usage with Next.js "><svg width="1em" height="1em"></svg></a></h3>
<p>Next.js allows for a slower build pipeline via Babel, which can be enabled by <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-babel">configuring Babel</a> by adding a <code>babel.config.js</code> file.</p>
<h3 id="usage-with-remix">Usage with Remix <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-remix" title="Link for Usage with Remix "><svg width="1em" height="1em"></svg></a></h3>
<p>Install <code>vite-plugin-babel</code>, and add the compiler’s Babel plugin to it:</p>
<div><p>npm install vite-plugin-babel</p></div>
<div><pre><code><p><span>// vite.config.js</span><br /></p><p><span>import</span> <span>babel</span> <span>from</span> <span>"vite-plugin-babel"</span><span>;</span><br /></p><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span> <span>/* ... */</span> <span>}</span><span>;</span><br /></p><p><span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>remix</span><span>(</span><span>{</span> <span>/* ... */</span><span>}</span><span>)</span><span>,</span><br /></p><p><span>babel</span><span>(</span><span>{</span><br /></p><p><span>filter</span><span>:</span> <span>/\.[jt]sx?$/</span><span>,</span><br /></p><p><span>babelConfig</span><span>:</span> <span>{</span><br /></p><p><span>presets</span><span>:</span> <span>[</span><span>"@babel/preset-typescript"</span><span>]</span><span>,</span> <span>// if you use TypeScript</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>[</span><span>"babel-plugin-react-compiler"</span><span>,</span> <span>ReactCompilerConfig</span><span>]</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>}</span><span>,</span><br /></p><p><span>}</span><span>)</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>}</span><span>)</span><span>;</span></p></code></pre></div>
<h3 id="usage-with-webpack">Usage with Webpack <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-webpack" title="Link for Usage with Webpack "><svg width="1em" height="1em"></svg></a></h3>
<p>You can create your own loader for React Compiler, like so:</p>
<div><pre><code><p><span>const</span> <span>ReactCompilerConfig</span> = <span>{</span> <span>/* ... */</span> <span>}</span><span>;</span><br /></p><p><span>const</span> <span>BabelPluginReactCompiler</span> = <span>require</span><span>(</span><span>'babel-plugin-react-compiler'</span><span>)</span><span>;</span><br /></p><p><span>function</span> <span>reactCompilerLoader</span><span>(</span><span>sourceCode</span><span>,</span> <span>sourceMap</span><span>)</span> <span>{</span><br /></p><p><span>// ...</span><br /></p><p><span>const</span> <span>result</span> = <span>transformSync</span><span>(</span><span>sourceCode</span><span>,</span> <span>{</span><br /></p><p><span>// ...</span><br /></p><p><span>plugins</span><span>:</span> <span>[</span><br /></p><p><span>[</span><span>BabelPluginReactCompiler</span><span>,</span> <span>ReactCompilerConfig</span><span>]</span><span>,</span><br /></p><p><span>]</span><span>,</span><br /></p><p><span>// ...</span><br /></p><p><span>}</span><span>)</span><span>;</span><br /></p><p><span>if</span> <span>(</span><span>result</span> === <span>null</span><span>)</span> <span>{</span><br /></p><p><span>this</span>.<span>callback</span><span>(</span><br /></p><p><span>Error</span><span>(</span><br /></p><p><span>`Failed to transform "</span><span>${</span><span>options</span>.<span>filename</span><span>}</span><span>"`</span><br /></p><p><span>)</span><br /></p><p><span>)</span><span>;</span><br /></p><p><span>return</span><span>;</span><br /></p><p><span>}</span><br /></p><p><span>this</span>.<span>callback</span><span>(</span><br /></p><p><span>null</span><span>,</span><br /></p><p><span>result</span>.<span>code</span><br /></p><p><span>result</span>.<span>map</span> === <span>null</span> ? <span>undefined</span> : <span>result</span>.<span>map</span><br /></p><p><span>)</span><span>;</span><br /></p><p><span>}</span><br /></p><p><span>module</span>.<span>exports</span> = <span>reactCompilerLoader</span><span>;</span></p></code></pre></div>
<h3 id="usage-with-expo">Usage with Expo <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-expo" title="Link for Usage with Expo "><svg width="1em" height="1em"></svg></a></h3>
<p>Expo uses Babel via Metro, so refer to the <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-babel">Usage with Babel</a> section for installation instructions.</p>
<h3 id="usage-with-react-native-metro">Usage with React Native (Metro) <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-react-native-metro" title="Link for Usage with React Native (Metro) "><svg width="1em" height="1em"></svg></a></h3>
<p>React Native uses Babel via Metro, so refer to the <a target="_blank" href="https://react.dev/learn/react-compiler#usage-with-babel">Usage with Babel</a> section for installation instructions.</p>
<h2 id="troubleshooting">Troubleshooting <a target="_blank" href="https://react.dev/learn/react-compiler#troubleshooting" title="Link for Troubleshooting "><svg width="1em" height="1em"></svg></a></h2>
<h3 id="reporting-issues">Reporting Issues <a target="_blank" href="https://react.dev/learn/react-compiler#reporting-issues" title="Link for Reporting Issues "><svg width="1em" height="1em"></svg></a></h3>
<p>To report issues, please first create a minimal repro on the <a href="https://playground.react.dev/" target="_blank">React Compiler Playground</a> and include it in your bug report.</p>
<p>You can open issues in the <a href="https://github.com/facebook/react/issues" target="_blank">facebook/react</a> repo.</p>
<p>You can also provide feedback in the React Compiler Working Group by applying to be a member. Please see <a href="https://github.com/reactwg/react-compiler" target="_blank">the README for more details on joining</a>.</p>
<h3 id="common-issues">Common Issues <a target="_blank" href="https://react.dev/learn/react-compiler#common-issues" title="Link for Common Issues "><svg width="1em" height="1em"></svg></a></h3>
<h4 id="0--_c-is-not-a-function-error"><code>(0 , _c) is not a function</code> error <a target="_blank" href="https://react.dev/learn/react-compiler#0--_c-is-not-a-function-error" title="Link for this heading"><svg width="1em" height="1em"></svg></a></h4>
<p>This occurs during JavaScript module evaluation when you are not using React 19 Beta and up. To fix this, <a href="https://react.dev/blog/2024/04/25/react-19-upgrade-guide" target="_blank">upgrade your app to React 19 Beta</a> first.</p>
<h3 id="debugging">Debugging <a target="_blank" href="https://react.dev/learn/react-compiler#debugging" title="Link for Debugging "><svg width="1em" height="1em"></svg></a></h3>
<h4 id="checking-if-components-have-been-optimized">Checking if components have been optimized <a target="_blank" href="https://react.dev/learn/react-compiler#checking-if-components-have-been-optimized" title="Link for Checking if components have been optimized "><svg width="1em" height="1em"></svg></a></h4>
<h5 id="react-devtools">React DevTools <a target="_blank" href="https://react.dev/learn/react-compiler#react-devtools" title="Link for React DevTools "><svg width="1em" height="1em"></svg></a></h5>
<p>React Devtools (v5.0+) has built-in support for React Compiler and will display a “Memo ✨” badge next to components that have been optimized by the compiler.</p>
<h5 id="other-issues">Other issues <a target="_blank" href="https://react.dev/learn/react-compiler#other-issues" title="Link for Other issues "><svg width="1em" height="1em"></svg></a></h5>
<p>Please see <a href="https://github.com/reactwg/react-compiler/discussions/7" target="_blank">https://github.com/reactwg/react-compiler/discussions/7</a>.</p></div>]]></content:encoded>
			</item>
			<item>
			<title>Open-source React Compiler by josephsavona · Pull Request #29061 · facebook&#x2F;react</title>
			<description>Reduces a dep needed to be installed by users of the polyfill                                  Based on implementation of a similar case in D54776832.                                  Fixes...</description>
			<link>https://github.com/facebook/react/pull/29061</link>
			<content:encoded><![CDATA[<div>
      <div>
  <p><a target="_blank" href="https://github.com/mofeiZ">
        <img src="https://avatars.githubusercontent.com/u/34200447?s=40&amp;v=4" alt="@mofeiZ" />
</a>  </p>
</div>      <div>
  <p><a target="_blank" href="https://github.com/mofeiZ">
        <img src="https://avatars.githubusercontent.com/u/34200447?s=40&amp;v=4" alt="@mofeiZ" />
</a>  </p>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/poteto">
        <img src="https://avatars.githubusercontent.com/u/1390709?s=40&amp;v=4" alt="@poteto" />
</a>  </p>
</div>
    <div>
      <pre>Reduces a dep needed to be installed by users of the polyfill</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/kassens">
        <img src="https://avatars.githubusercontent.com/u/11849?s=40&amp;v=4" alt="@kassens" />
</a>  </p>
</div>
    <div>
      <pre>Based on implementation of a similar case in D54776832.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fixes T180509722. What happened is that the logic in LeaveSSA to find 
declarations within for initializers wasn't working with try/catch because the 
initializer block gets broken up with a maybe-throw after every instruction that 
can throw. These maybe-throws can then get turned into gotos by 
PruneMaybeThrows, so LeaveSSA has to handle both cases. 
The new logic scans from the start of the init block until reaching the end, and 
creates declarations for all StoreLocals. Note that we don't yet support 
maybe-throw in value blocks — that's already a todo — so the change here simply 
allows us to compile farther until reaching that other todo. But i've 
double-checked the HIR and it looks correct for this case, so it should just 
work once we fix that todo. I've also added a comment to help us remember (and 
of course, we'd have to add a snap fixture too)</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fixes T175282980. InferReactiveScopeVariables had logic to force assigning a 
scope to MethodCall property lookups with the idea of forcing the method call 
lookup to be in the same scope as the method call itself. But this doesn't work 
if we never assign a scope to the method call! That can happen if we're able to 
infer that the method call produces a primitive and doesn't need memoization. 
This PR changes things so that: 
* InferReactiveScopeVariables no longer assumes that MethodCall property values 
need a scope 
* We run a separate pass that ensures that _if_ a MethodCall has a scope, that 
it's property is in the scope, and that otherwise its property doesn't get a 
scope. This is similar to the existing passes that force a single scope for 
related instructions like ObjectMethod+ObjectExpression and fbt operands/calls.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fixes T180504437. In MergeOverlappingReactiveScopes we track the active scopes 
and mark them as "ended" when reaching the first instruction after their mutable 
range. However, in cases of interleaving that will be merged, we could 
previously mark a scope as complete when it's original range was completed, even 
though the range would get extended post-merge. The fix here detects 
interleaving earlier, and eagerly updates the mutable ranges of the merged 
scopes to ensure that neither is "ended" earlier than it should. 
The repro here fails without this change.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fixes T180504437. We expected `&lt;fbt:param&gt;` to always have no surrounding 
whitespace or have both leading and trailing whitespace, it can have one but not 
the other, though such cases are rare in practice.</pre>
    </div>
</div>      <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>This was an oversight in codegen. The entire pipeline supports multiple values 
in a for initializer, but codegen was dropping all but the first initializer.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>I addressed some of the cases that lead to this invariant but there were still 
more. In this case, we have scopes like this: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$0] { 
let t$0 = ArrayExpression [] 
if (...) { 
return null; 
} 
} 
scope <a target="_blank" href="https://github.com/2">@2</a> deps=[t$0] declarations=[t$1] { 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
Because scope 1 has an early return, PropagateEarlyReturns wraps its contents in 
a label and converts the returns to breaks: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$0] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] 
if (...) { 
t$2 = null; 
break bb0; 
} 
} 
} 
scope <a target="_blank" href="https://github.com/2">@2</a> deps=[t$0] declarations=[t$1] { 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
But then MergeReactiveScopesThatInvalidateTogether smushes them together: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$1] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] // &lt;--- Oops! We're inside a block now 
if (...) { 
t$2 = null; 
break bb0; 
} 
} 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
Note that the `t$0` binding is now created inside the labeled block, so it's no 
longer accessible to the Jsx instruction which follows the labeled block. This 
isn't an issue with promoting temporaries or propagating outputs, but a simple 
issue of the labeled block (used for early return) introducing a new block 
scope. The solution here is to simply reorder the passes so that we transform 
for early returns after other optimizations. This means the jsx element will 
basically move inside the labeled block, solving the scoping issue: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$1] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] // ok, same block scope as its use 
if (...) { 
t$2 = null; 
break bb0; 
} 
let t$1 = Jsx children=[t$0] // note this moved inside the labeled block 
} 
} 
```</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>"Support" in the sense of dropping these on the floor and compiling, rather than 
bailing out with a todo. 
We already don't make any guarantees about which type annotations we'll preserve 
through to the output, so it seems fine for now to just drop type aliases.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>This was one of the last invariants firing internally, this PR adds a minimal 
repro and the next PR makes it a todo.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>We need to revisit the conversion from value blocks into ReactiveFunction. Or 
just revisit ReactiveFunction altogether (see my post about what this would look 
like). For now, makes this case a todo.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>While i'm here, we know that there are a variety of cases that are not supported 
yet around combining value blocks with other syntax constructs. Since we're 
aware of these cases and detect them, we can make this a todo instead of an 
invariant.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/kassens">
        <img src="https://avatars.githubusercontent.com/u/11849?s=40&amp;v=4" alt="@kassens" />
</a>  </p>
</div>
    <div>
      <pre>[linter] rename ReactForgetDiagnostics to ReactCompilerRule</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>I addressed some of the cases that lead to this invariant but there were still 
more. In this case, we have scopes like this: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$0] { 
let t$0 = ArrayExpression [] 
if (...) { 
return null; 
} 
} 
scope <a target="_blank" href="https://github.com/2">@2</a> deps=[t$0] declarations=[t$1] { 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
Because scope 1 has an early return, PropagateEarlyReturns wraps its contents in 
a label and converts the returns to breaks: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$0] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] 
if (...) { 
t$2 = null; 
break bb0; 
} 
} 
} 
scope <a target="_blank" href="https://github.com/2">@2</a> deps=[t$0] declarations=[t$1] { 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
But then MergeReactiveScopesThatInvalidateTogether smushes them together: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$1] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] // &lt;--- Oops! We're inside a block now 
if (...) { 
t$2 = null; 
break bb0; 
} 
} 
let t$1 = Jsx children=[t$0] ... 
} 
``` 
Note that the `t$0` binding is now created inside the labeled block, so it's no 
longer accessible to the Jsx instruction which follows the labeled block. This 
isn't an issue with promoting temporaries or propagating outputs, but a simple 
issue of the labeled block (used for early return) introducing a new block 
scope. The solution (in the next PR) is to simply reorder the passes so that we 
transform for early returns after other optimizations. This means the jsx 
element will basically move inside the labeled block, solving the scoping issue: 
``` 
scope <a target="_blank" href="https://github.com/1">@1</a> declarations=[t$1] earlyReturn={t$2} { 
let t$2 
bb0: { 
let t$0 = ArrayExpression [] // ok, same block scope as its use 
if (...) { 
t$2 = null; 
break bb0; 
} 
let t$1 = Jsx children=[t$0] // note this moved inside the labeled block 
} 
} 
```</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Repro from T180504728 which reproduced internally and on playground, neither of 
which have <a target="_blank" href="https://github.com/facebook/react/issues/2687">#2687</a> yet. That PR (earlier in this stack) already fixes the issue, 
so i'm just adding the repro to help prevent regressions.</pre>
    </div>
</div>      <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/mofeiZ">
        <img src="https://avatars.githubusercontent.com/u/34200447?s=40&amp;v=4" alt="@mofeiZ" />
</a>  </p>
</div>
    <div>
      <pre>--- 
Previously, we always emitted `Memoize dep` instructions after the function 
expression literal and depslist instructions 
```js 
// source 
useManualMemo(() =&gt; {...}, [arg]) 
// lowered 
$0 = FunctionExpression(...) 
$1 = LoadLocal (arg) 
$2 = ArrayExpression [$1] 
$3 = Memoize (arg) 
$4 = Call / LoadLocal 
$5 = Memoize $4 
``` 
Now, we insert `Memoize dep` before the corresponding function expression 
literal: 
```js 
// lowered 
$0 = StartMemoize (arg)      &lt;---- this moved up! 
$1 = FunctionExpression(...) 
$2 = LoadLocal (arg) 
$3 = ArrayExpression [$2] 
$4 = Call / LoadLocal 
$5 = FinishMemoize $4 
``` 
Design considerations: 
- <a target="_blank" href="https://github.com/facebook/react/pull/2663">#2663</a> needs to understand which lowered instructions belong to a manual 
memoization block, so we need to emit `StartMemoize` instructions before the 
`useMemo/useCallback` function argument, which contains relevant memoized 
instructions 
- we choose to insert StartMemoize instructions to (1) avoid unsafe instruction 
reordering of source and (2) to ensure that Forget output does not change when 
enabling validation 
This PR only renames `Memoize` -&gt; `Start/FinishMemoize` and hoists 
`StartMemoize` as described. The latter may help with stricter validation for 
`useCallback`s, although testing is left to the next PR. 
<a target="_blank" href="https://github.com/facebook/react/pull/2663">#2663</a> contains all validation changes</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/mofeiZ">
        <img src="https://avatars.githubusercontent.com/u/34200447?s=40&amp;v=4" alt="@mofeiZ" />
</a>  </p>
</div>
    <div>
      <pre>…ves subset
of dependencies from source 
--- 
`validatePreserveExistingMemoizationGuarantees` previously checked 
- manual memoization dependencies and declarations (the returned value) do not 
"lose" memoization due to inferred mutations 
``` 
function useFoo() { 
const y = {}; 
// bail out because we infer that y cannot be a dependency of x as its 
mutableRange 
// extends beyond 
const x = useMemo(() =&gt; maybeMutate(y), [y]); 
// similarly, bail out if we find that x or y are mutated here 
return x; 
} 
``` 
- manual memoization deps and decls do not get deopted due to hook calls 
``` 
function useBar() { 
const x = getArray(); 
useHook(); 
mutate(x); 
return useCallback(() =&gt; [x], [x]); 
} 
``` 
This PR updates `validatePreserveExistingMemoizationGuarantees` with the 
following correctness conditions: 
*major change* All inferred dependencies of reactive scopes between 
`StartMemoize` and `StopMemoize` instructions (e.g. scopes containing manual 
memoization code) must either: 
1. be produced from earlier within the same manual memoization block 
2. exactly match an element of depslist from source 
This assumes that the source codebase mostly follows the `exhaustive-deps` lint 
rule, which ensures that deps lists are (1) simple expressions composing of 
reads from named identifiers + property loads and (2) exactly match deps usages 
in the useMemo/useCallback itself. 
--- 
Validated that this does not change source by running internally on ~50k files 
(no validation on `main`, no validation on this PR, and validation on this PR).</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/kassens">
        <img src="https://avatars.githubusercontent.com/u/11849?s=40&amp;v=4" alt="@kassens" />
</a>  </p>
</div>
    <div>
      <pre>Remove private header from playground 
Before we miss removing this from the public release, I think we can remove this 
header now already. We're still behind a secret URL + password.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/mofeiZ">
        <img src="https://avatars.githubusercontent.com/u/34200447?s=40&amp;v=4" alt="@mofeiZ" />
</a>  </p>
</div>
    <div>
      <pre>--- 
Many compiler errors have neither descriptions nor suggestions (e.g. most `todo` 
or `invariant` errors), so let's make those optional</pre>
    </div>
</div>      <div>
  <p><a target="_blank" href="https://github.com/gsathya">
        <img src="https://avatars.githubusercontent.com/u/565765?s=40&amp;v=4" alt="@gsathya" />
</a>  </p>
</div>      <div>
  <p><a target="_blank" href="https://github.com/gsathya">
        <img src="https://avatars.githubusercontent.com/u/565765?s=40&amp;v=4" alt="@gsathya" />
</a>  </p>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>This case is specific to early return inside an inlined IIFE (which can often 
occur as a result of dropping manual memoization). When we inline IIFEs, as a 
reminder we wrap the body in a labeled block and convert returns to assignment 
of a temporary + break out of the label. 
Those reassignments themselves are getting a reactive scope assigned since the 
reassigned value has a mutable range. They don't really need a mutable range or 
scope, though. And then the presence of the `break` statements means that we can 
sometimes exit out of the scope before reaching the end - leading to unreachable 
code. 
This can only occur though where _all the values are already memoized_. So the 
code works just fine and even memoizes just fine - it's just that we have some 
extraneous scopes and there is technically unreachable code. I'll fix in a 
follow-up, adding a repro here.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Extracts a helper from the repro earlier in the stack into a helper in 
shared-runtime. This makes it easy to verify that memoization is actually 
working.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>The example earlier in the stack had unreachable code in the output because 
there was an unnecessary memoization block around an assignment. This was a 
holdover from before we moved the logic to expand mutable ranges for phis from 
LeaveSSA to InferMutableRanges. We were conservatively assigning a mutable range 
to all variables with a phi, even those that didn't strictly need one. 
Removing the range extension logic in LeaveSSA fixed the issue, but uncovered 
the fact that AlignReactiveScopesToBlockScopes was missing a case to handle 
optionals. 
## Test Plan 
Synced internally and ran a snapshot/comparison of compilation before/after 
(P1197734337 for those curious). The majority of components get fewer memo slots 
thanks to not needing to memoize non-allocating value block expressions like 
ternaries/optionals. In a few cases, the fact that we're no longer assigning a 
mutable range for value blocks (unless there is actually a mutation!) means we 
get more fine-grained memoization and increase the number of memoization blocks. 
So overall this appears to be correct, improve memoization, and reduce code 
size.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fbt violates the JSX spec by using a lowercase function as a tagname, even 
though lowercase names are reserved for builtins. Here we detect cases where 
there is an `&lt;fbt&gt;` tag where `fbt` is a local identifier and throw a todo.</pre>
    </div>
</div>      <div>
  <div>
  <p><a target="_blank" href="https://github.com/josephsavona">
        <img src="https://avatars.githubusercontent.com/u/6425824?s=40&amp;v=4" alt="@josephsavona" />
</a>  </p>
</div>
    <div>
      <pre>Fbt enums appear to rely on source locations and something that we're doing 
(maybe destructuring?) isn't preserving locations such that the fbt plugin 
breaks.</pre>
    </div>
</div>  </div>]]></content:encoded>
			</item>
			<item>
			<title>Popover API - Web APIs | MDN</title>
			<description>The Popover API provides developers with a standard, consistent, flexible mechanism for displaying popover content on top of other page content. Popover content can be controlled either declaratively using HTML attributes, or via JavaScript.</description>
			<link>https://developer.mozilla.org/en-US/docs/Web/API/Popover_API</link>
			<content:encoded><![CDATA[<article><details><summary><span></span><h2>Baseline <span>2024</span></h2><p>Newly available</p><span></span></summary></details><p>The <strong>Popover API</strong> provides developers with a standard, consistent, flexible mechanism for displaying popover content on top of other page content. Popover content can be controlled either declaratively using HTML attributes, or via JavaScript.</p><section><h2 id="concepts_and_usage"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#concepts_and_usage">Concepts and usage</a></h2><div><p>A very common pattern on the web is to show content over the top of other content, drawing the user's attention to specific important information or actions that need to be taken. This content can take several different names — overlays, popups, popovers, dialogs, etc. We will refer to them as popovers through the documentation. Generally speaking, these can be:</p>
<ul>
  <li><strong>modal</strong>, meaning that while a popover is being shown, the rest of the page is rendered non-interactive until the popover is actioned in some way (for example an important choice is made).</li>
  <li><strong>non-modal</strong>, meaning that the rest of the page can be interacted with while the popover is being shown.</li>
</ul>
<p>Popovers created using the Popover API are always non-modal. If you want to create a modal popover, a <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> element is the right way to go. There is significant overlap between the two — you might for example want to create a popover that persists, but control it using declarative HTML. You can turn a <code>&lt;dialog&gt;</code> element into a popover (<code>&lt;dialog popover&gt;</code> is perfectly valid) if you want to combine popover control with dialog semantics.</p>
<p>Typical use cases for the popover API include user-interactive elements like action menus, custom "toast" notifications, form element suggestions, content pickers, or teaching UI.</p>
<p>You can create popovers in two different ways:</p>
<ul>
  <li>Declaratively, via a set of new HTML attributes. A simple popover with a toggle button can be created using the following code:
    <div><pre><code><span><span><span>&lt;</span>button</span> <span>popovertarget</span><span><span>=</span><span>"</span>mypopover<span>"</span></span><span>&gt;</span></span>Toggle the popover<span><span><span>&lt;/</span>button</span><span>&gt;</span></span>
<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>mypopover<span>"</span></span> <span>popover</span><span>&gt;</span></span>Popover content<span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
</code></pre></div>
  </li>
  <li>Via a JavaScript API. For example, <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/togglePopover"><code>HTMLElement.togglePopover()</code></a> can be used to toggle a popover between shown and hidden.</li>
</ul>
<p>There are also new events to react to a popover being toggled, and CSS features to aid in styling popovers. All the new features are listed below.</p>
<p>See <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API/Using">Using the popover API</a> for a detailed guide to using this API.</p></div></section><section><h2 id="html_attributes"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#html_attributes">HTML attributes</a></h2><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover"><code>popover</code></a>
  <dd>
    <p>A global attribute that turns an element into a popover element; takes a popover state (<code>"auto"</code> or <code>"manual"</code>) as its value.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertarget"><code>popovertarget</code></a>
  <dd>
    <p>Turns a <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> or <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> element into a popover control button; takes the ID of the popover element to control as its value.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertargetaction"><code>popovertargetaction</code></a>
  <dd>
    <p>Specifies the action to be performed (<code>"hide"</code>, <code>"show"</code>, or <code>"toggle"</code>) on the popover element being controlled by a control <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> or <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a>.</p>
  </dd>
</dl></div></section><section><h2 id="css_features"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#css_features">CSS features</a></h2><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop"><code>::backdrop</code></a>
  <dd>
    <p>The <code>::backdrop</code> pseudo-element is a full-screen element placed directly behind popover elements, allowing effects to be added to the page content behind the popover(s) if desired (for example blurring it out).</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/:popover-open"><code>:popover-open</code></a>
  <dd>
    <p>The <code>:popover-open</code> pseudo-class matches a popover element only when it is in the showing state — it can be used to style popover elements when they are showing.</p>
  </dd>
</dl></div></section><section><h2 id="interfaces"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#interfaces">Interfaces</a></h2><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent"><code>ToggleEvent</code></a>
  <dd>
    <p>Represents an event notifying the user when a popover element's state toggles between showing and hidden. It is the event object for the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforetoggle_event" title="beforetoggle"><code>beforetoggle</code></a> and <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/toggle_event" title="toggle"><code>toggle</code></a> events, which fire on popovers when their state changes.</p>
  </dd>
</dl></div></section><section><h2 id="extensions_to_other_interfaces"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#extensions_to_other_interfaces">Extensions to other interfaces</a></h2></section><section><h3 id="instance_properties"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#instance_properties">Instance properties</a></h3><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/popover"><code>HTMLElement.popover</code></a>
  <dd>
    <p>Gets and sets an element's popover state via JavaScript (<code>"auto"</code> or <code>"manual"</code>), and can be used for feature detection. Reflects the value of the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover"><code>popover</code></a> global HTML attribute.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/popoverTargetElement"><code>HTMLButtonElement.popoverTargetElement</code></a> and <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/popoverTargetElement"><code>HTMLInputElement.popoverTargetElement</code></a>
  <dd>
    <p>Gets and sets the popover element being controlled by the control button. The JavaScript equivalent of the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertarget"><code>popovertarget</code></a> HTML attribute.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/popoverTargetAction"><code>HTMLButtonElement.popoverTargetAction</code></a> and <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/popoverTargetAction"><code>HTMLInputElement.popoverTargetAction</code></a>
  <dd>
    <p>Gets and sets the action to be performed (<code>"hide"</code>, <code>"show"</code>, or <code>"toggle"</code>) on the popover element being controlled by the control button. Reflects the value of the <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertargetaction"><code>popovertargetaction</code></a> HTML attribute.</p>
  </dd>
</dl></div></section><section><h3 id="instance_methods"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#instance_methods">Instance methods</a></h3><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidePopover"><code>HTMLElement.hidePopover()</code></a>
  <dd>
    <p>Hides a popover element by removing it from the top layer and styling it with <code>display: none</code>.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/showPopover"><code>HTMLElement.showPopover()</code></a>
  <dd>
    <p>Shows a popover element by adding it to the top layer.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/togglePopover"><code>HTMLElement.togglePopover()</code></a>
  <dd>
    <p>Toggles a popover element between the showing and hidden states.</p>
  </dd>
</dl></div></section><section><h3 id="events"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#events">Events</a></h3><div><dl>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#htmlelement"><code>HTMLElement</code></a> <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforetoggle_event" title="beforetoggle"><code>beforetoggle</code></a> event
  <dd>
    <p>Fired just before a popover element's state changes between showing and hidden, or vice versa.</p>
  </dd>
  <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#htmlelement_2"><code>HTMLElement</code></a> <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/toggle_event" title="toggle"><code>toggle</code></a> event
  <dd>
    <p>Fired just after a popover element's state changes between showing and hidden, or vice versa. This event already existed to signal state changes on <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"><code>&lt;details&gt;</code></a> elements, and it seemed logical to extend it for popover elements.</p>
  </dd>
</dl></div></section><section><h2 id="examples"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#examples">Examples</a></h2><div><p>See our <a href="https://mdn.github.io/dom-examples/popover-api/" target="_blank">Popover API examples landing page</a> to access the full collection of MDN popover examples.</p></div></section><h2 id="specifications"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#specifications">Specifications</a></h2><table><thead><tr><th>Specification</th></tr></thead><tbody><tr><td><a target="_blank" href="https://html.spec.whatwg.org/multipage/popover.html#dom-popover">HTML Standard <br /><small># dom-popover</small></a></td></tr></tbody></table><h2 id="browser_compatibility"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#browser_compatibility">Browser compatibility</a></h2><p>BCD tables only load in the browser</p><section><h2 id="see_also"><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API#see_also">See also</a></h2><div><ul>
  <li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover"><code>popover</code></a> HTML global attribute</li>
  <li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertarget"><code>popovertarget</code></a> HTML attribute</li>
  <li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertargetaction"><code>popovertargetaction</code></a> HTML attribute</li>
  <li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop"><code>::backdrop</code></a> CSS pseudo-element</li>
  <li><a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/:popover-open"><code>:popover-open</code></a> CSS pseudo-class</li>
</ul></div></section></article>]]></content:encoded>
			</item>
			<item>
			<title>Popover API lands in Baseline  |  Blog  |  web.dev</title>
			<description>Stay organized with collections                          Save and categorize content based on your preferences.                        It&#39;s happening! One of the features I am most hyped about has...</description>
			<link>https://web.dev/blog/popover-api</link>
			<content:encoded><![CDATA[<div>
<article>
        <span>
          Stay organized with collections
        </span>
        <span>
          Save and categorize content based on your preferences.
        </span>
<div>
<div>
          <p><img alt="Una Kravets" src="https://web.dev/images/authors/unakravets.jpg" /></p>
      </div>
<p>It's happening! One of the features I am most hyped about has just landed across all modern browsers and is officially a part of Baseline 2024. And this feature is the <a target="_blank" href="https://developer.mozilla.org/docs/Web/API/Popover_API">Popover API</a>. Popover provides so many awesome primitives and developer affordances for building layered interfaces like tooltips, menus, teaching UIs, and more.</p>
<div>
        <p>Browser Support</p>
        <ul>
  <li>114</li>
  <li>114</li>
  <li>125</li>
  <li>17</li>
        </ul>
        <p><a target="_blank" href="https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction">Source</a></p>
      </div>
<p>Some quick highlights of popover capabilities include:</p>
<ul>
<li><strong>Promotion to the top layer.</strong> Popovers will appear in the <a target="_blank" href="https://developer.chrome.com/blog/what-is-the-top-layer">top layer</a> above the rest of the page, so you don't have to play around with <code>z-index</code>.</li>
<li><strong>Light-dismiss functionality.</strong> Clicking outside of the popover area will close the popover and return focus.</li>
<li><strong>Default focus management.</strong> Opening the popover makes the next tab stop inside the popover.</li>
<li><strong>Accessible keyboard bindings.</strong> Hitting the <code>esc</code> key or double toggling will close the popover and return focus.</li>
<li><strong>Accessible component bindings.</strong> Connecting a popover element to a popover trigger semantically.</li>
</ul>
<h2 id="creating_popovers">Creating popovers</h2>
<p>Creating popovers is quite straightforward. To use default values, all you need is a <code>button</code> to trigger the popover, and an element to trigger.</p>
<ul>
<li>First, set a <code>popover</code>attribute on the element which is going to be the popover.</li>
<li>Then, add an unique <code>id</code> on the popover element.</li>
<li>Finally, to connect the button to the popover, set the button's <code>popovertarget</code>to the value of the popover element's <code>id</code>.</li>
</ul>
<p>This is shown in the following code:</p>
<pre><code>&lt;button popovertarget="my-popover"&gt;Open Popover&lt;/button&gt;
&lt;div id="my-popover" popover&gt;
  &lt;p&gt;&lt;p&gt;I am a popover with more information. Hit &lt;kbd&gt;esc&lt;/kbd&gt; or click away to close me.&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<figure>
  <figcaption>A basic example of using the popover attribute.</figcaption>
</figure>
<p>To have more granular control over the popover, you can explicitly set types of popovers. For example, using a bare <code>popover</code> attribute with no value is the same as <code>popover="auto"</code>. The <code>auto</code> value enables light-dismiss behavior and automatically closes other popovers. Use <code>popover="manual"</code> and you will need to add a close button, manual popovers don't close other popovers or allow users to dismiss the popover by clicking away in the UI. You create a manual popover using the following:</p>
<pre><code>&lt;button popovertarget="my-popover" class="trigger-btn"&gt; Open Popover &lt;/button&gt;
&lt;div id="my-popover" popover=manual&gt;
  &lt;p&gt;I am a popover with more information. Hit the close button or toggle to close me.&lt;p&gt;
  &lt;button class="close-btn" popovertarget="my-popover" popovertargetaction="hide"&gt;
    &lt;span aria-hidden="true"&gt;❌&lt;/span&gt;
    &lt;span class="sr-only"&gt;Close&lt;/span&gt;
  &lt;/button&gt;
&lt;/div&gt;
</code></pre>
<figure>
  <figcaption>An example of a manual popover.</figcaption>
</figure>
<h2 id="popover_versus_modal_dialog">Popover versus modal dialog</h2>
<p>You may be wondering if you need popover when dialog exists, and the answer is: you might not.</p>
<p>It's important to note that the popover attribute does not provide semantics on its own. And while you can now build modal dialog-like experiences using popover, there are a few key differences between the two:</p>
<div>
    <h3 id="the-modal-dialog-element">The modal <code>&lt;dialog&gt;</code> element</h3>
    <ul>
      <li>Opened with <code>dialog.showModal()</code>.</li>
      <li>Closed with <code>dialog.close()</code>.</li>
      <li>Makes the rest of the page inert.</li>
      <li>Does not support light-dismiss behavior.</li>
      <li>You can style the open state with the <code>[open]</code> attribute.</li>
      <li>Semantically represents an interactive component that blocks interaction with the rest of the page.</li>
    </ul>
  </div>
<div>
    <h3 id="the-[popover]-attribute">The <code>[popover]</code> attribute</h3>
    <ul>
      <li>Can be opened with a declarative invoker (<code>popovertarget</code>).</li>
      <li>Closed with <code>popovertarget</code> (auto popover) or <code>popovertargetaction=hide</code> (manual popover).</li>
      <li>Does not make the rest of the page inert.</li>
      <li>Supports light-dismiss behavior.</li>
      <li>You can style the open state with the <code>:popover-open</code> pseudo-class.</li>
      <li>No inherent semantics.</li>
    </ul>
  </div>
<h2 id="conclusion_and_further_reading">Conclusion and further reading</h2>
<p>There are many exciting features that <code>popover</code> brings to the platform. To learn more about this API, including more on the accessibility of the feature, and documentation regarding the feature set, here is some recommended reading for further information:</p>
<ul>
<li><a target="_blank" href="https://hidde.blog/popover-semantics/">Semantics and the popover attribute: what to use when? by Hidde de Vries</a></li>
<li><a target="_blank" href="https://hidde.blog/popover-accessibility/">On popover accessibility: what the browser does and doesn't do by Hidde de Vries</a></li>
<li><a target="_blank" href="https://developer.mozilla.org/docs/Web/HTML/Global_attributes/popover">MDN documentation on popover</a></li>
</ul>
</div>
</article>
  <p>Except as otherwise noted, the content of this page is licensed under the <a target="_blank" href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 License</a>, and code samples are licensed under the <a target="_blank" href="https://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>. For details, see the <a target="_blank" href="https://developers.google.com/site-policies">Google Developers Site Policies</a>. Java is a registered trademark of Oracle and/or its affiliates.</p>
  <p>Last updated 2024-04-25 UTC.</p>
<p>
  [{
      "type": "thumb-down",
      "id": "missingTheInformationINeed",
      "label":"Missing the information I need"
    },{
      "type": "thumb-down",
      "id": "tooComplicatedTooManySteps",
      "label":"Too complicated / too many steps"
    },{
      "type": "thumb-down",
      "id": "outOfDate",
      "label":"Out of date"
    },{
      "type": "thumb-down",
      "id": "samplesCodeIssue",
      "label":"Samples / code issue"
    },{
      "type": "thumb-down",
      "id": "otherDown",
      "label":"Other"
    }]
  [{
      "type": "thumb-up",
      "id": "easyToUnderstand",
      "label":"Easy to understand"
    },{
      "type": "thumb-up",
      "id": "solvedMyProblem",
      "label":"Solved my problem"
    },{
      "type": "thumb-up",
      "id": "otherUp",
      "label":"Other"
    }]
</p>
        </div>]]></content:encoded>
			</item>
			<item>
			<title>Introducing the CSS anchor positioning API  |  Blog  |  Chrome for Developers</title>
			<description>The CSS Anchor Positioning API is a game-changer in web development because it lets you natively position elements relative to other elements, known as anchors. This API simplifies complex layout requirements...</description>
			<link>https://developer.chrome.com/blog/anchor-positioning-api</link>
			<content:encoded><![CDATA[<div>
<div>
          <p><img alt="Una Kravets" src="https://web.dev/images/authors/unakravets.jpg" /></p>
      </div>
<p>The CSS Anchor Positioning API is a game-changer in web development because it lets you natively position elements relative to other elements, known as <em>anchors</em>. This API simplifies complex layout requirements for many interface features like menus and submenus, tooltips, selects, labels, cards, settings dialogs, and many more. With anchor positioning built into the browser, you'll be able to build layered user interfaces without relying on third-party libraries, opening a world of creative possibilities.</p>
<p>Anchor positioning is available from Chrome 125.</p>
<div>
        <p>Browser Support</p>
        <ul>
  <li>125</li>
  <li>125</li>
  <li>x</li>
  <li>x</li>
        </ul>
        <p><a target="_blank" href="https://developer.mozilla.org/docs/Web/CSS/anchor">Source</a></p>
      </div>
<h2 id="core_concepts_anchors_and_positioned_elements">Core Concepts: Anchors and positioned elements</h2>
<p>At the heart of this API lies the relationship between <em>anchors</em> and <em>positioned elements</em>. An anchor is an element designated as a reference point using the <code>anchor-name</code> property. A positioned element is an element placed relative to an anchor using the <code>position-anchor</code> property or explicitly using <code>anchor-name</code> in its positioning logic.</p>
<figure>
    <img src="https://developer.chrome.com/blog/anchor-positioning-api/image/anchor-diagram-0.png" alt="" />
    <figcaption>Anchor elements and positioned elements.</figcaption>
</figure>
<h2 id="setting_up_anchors">Setting up anchors</h2>
<p>Creating an anchor is straightforward. Apply the anchor-name property to the selected element, and assign it a unique identifier. This unique identifier must be prepended with a double dash, much like a CSS variable.</p>
<pre><code>.anchor-button {
    anchor-name: --anchor-el;
}
</code></pre>
<p>Once assigned an anchor-name, <code>.anchor-button</code> serves as an anchor, ready to guide the placement of other elements. You can connect this anchor to other elements in one of two ways:</p>
<h3 id="implicit_anchors">Implicit anchors</h3>
<p>The first way to connect an anchor to another element is with an <em>implicit anchor</em> as in the following code example. The <code>position-anchor</code> property is added to the element you want to connect to your anchor, and has the name of the anchor (in this case <code>--anchor-el</code>) as a value.</p>
<pre><code>.positioned-notice {
    position-anchor: --anchor-el;
}
</code></pre>
<p>With an implicit anchor relationship, you can position elements using the <code>anchor()</code> function without explicitly specifying the anchor name at its first argument.</p>
<pre><code>.positioned-notice {
    position-anchor: --anchor-el;
    top: anchor(bottom);
}
</code></pre>
<h3 id="explicit_anchors">Explicit anchors</h3>
<p>Alternatively, you can use the anchor name directly in the anchor function (for example, <code>top: anchor(--anchor-el, bottom</code>). This is called an <strong>explicit anchor</strong>, and can be handy if you want to anchor to multiple elements (read on for an example).</p>
<pre><code>.positioned-notice {
    top: anchor(--anchor-el bottom);
}
</code></pre>
<h2 id="position_elements_relative_to_anchors">Position elements relative to anchors</h2>
<figure>
    <img src="https://developer.chrome.com/blog/anchor-positioning-api/image/anchor-diagram-1.png" alt="" />
    <figcaption>Anchor positioning diagram with physical properties.</figcaption>
</figure>
<p>Anchor positioning builds on CSS absolute positioning To use positioning values you need to add <code>position: absolute</code> to your positioned element. Then, use the <code>anchor()</code> function to apply positioning values. For example,  to position an anchored element at the top left of the anchoring element, use the following positioning:</p>
<pre><code>.positioned-notice {
    position-anchor: --anchor-el;
    /* absolutely position the positioned element */
    position: absolute;
    /* position the right of the positioned element at the right edge of the anchor */
    right: anchor(right);
    /* position the bottom of the positioned element at the top edge of the anchor */
    bottom: anchor(top);
}
</code></pre>
<figure>
    <img src="https://developer.chrome.com/blog/anchor-positioning-api/image/anchor-diagram-2.png" alt="" />
    <figcaption>Diagram of positioning edges on the positioned element.</figcaption>
</figure>
<p>Now you have one element anchored to another, like so:</p>
<figure>
  <figcaption>Demo of a basic anchor.</figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-1_2880.png 2880w" /></p>
<p>To use logical positioning for these values, the equivalents are as follows:</p>
<ul>
<li><code>top</code> = <code>inset-block-start</code></li>
<li><code>left</code>= <code>inset-inline-start</code></li>
<li><code>bottom</code> = <code>inset-block-end</code></li>
<li><code>right</code>= <code>inset-inline-end</code></li>
</ul>
<h3 id="center_a_positioned_element_with_anchor-center">Center a positioned element with <code>anchor-center</code></h3>
<p>To make it easier to center your anchor positioned element relative to its anchor, there's a new value called <code>anchor-center</code> which can be used with the <code>justify-self</code>, <code>align-self</code>, <code>justify-items</code>, and <code>align-items</code> properties.</p>
<p>This example modifies the previous one by using <code>justify-self: anchor-center</code> to center the positioned element on top of its anchor.</p>
<pre><code>.positioned-notice {
  position: absolute;
  /*  Anchor reference  */
  position-anchor: --anchor-el;
  /*  Position bottom of positioned elem at top of anchor  */
  bottom: anchor(top);
  /*  Center justification to the anchor */
  justify-self: anchor-center;
}
</code></pre>
<figure>
  <figcaption>Demo of an anchor centered using <code>justify-center</code>.</figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-2_2880.png 2880w" /></p>
<h3 id="multiple_anchors">Multiple anchors</h3>
<p>Elements can be tethered to more than one anchor. This means you may need to set position values that are positioned relative to more than one anchor. Do this by using the <code>anchor()</code> function and explicitly stating which anchor you are referencing in the first argument. In the following example, the top-left of a positioned element is anchored to the bottom-right of one anchor, and the bottom-right of the positioned element is anchored to the top-left of the second anchor:</p>
<pre><code>.anchored {
  position: absolute;
  top: anchor(--one bottom);
  left: anchor(--one right);
  right: anchor(--two left);
  bottom: anchor(--two top);
}
</code></pre>
<figure>
  <figcaption>Demo showing multiple anchors.</figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-3_2880.png 2880w" /></p>
<h2 id="position_with_inset-area">Position with <code>inset-area</code></h2>
<p>In addition to the default directional positioning from absolute positioning, there is a new layout mechanism included in the anchoring API called inset area.</p>
<p>Inset area makes it easy to place anchor positioned elements relative to their respective anchors, and works on a 9-cell grid with the anchoring element in the center.</p>
<p>Various possible inset-area positioning options, shown on the 9-cell grid</p>
<p>To use inset area rather than absolute positioning, use the <code>inset-area</code> property, with physical or logical values. For example:</p>
<ul>
<li>Top-center: <code>inset-area: top</code> or <code>inset-area: block-start</code></li>
<li>Left-center: <code>inset-area: left</code> or <code>inset-area: inline-start</code></li>
<li>Bottom-center: <code>inset-area: bottom</code> or <code>inset-area: block-end</code></li>
<li>Right-center: <code>inset-area: right</code> or <code>inset-area: inline-end</code></li>
</ul>
<figure>
  <figcaption>Demo showing multiple anchors.</figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-4_2880.png 2880w" /></p>
<p>To explore these positions further, check out the following tool:</p>
<figure>
  <figcaption>Anchor tool for inset area positions.</figcaption>
</figure>
<h2 id="size_elements_with_anchor-size">Size elements with <code>anchor-size()</code></h2>
<p>The <code>anchor-size()</code> function, also part of the anchor positioning API, can be used to size or position an anchor positioned element based on the size of its anchor (width, height, or inline and block sizes).</p>
<p>The following CSS shows an example of using this for height,using <code>anchor-size(height)</code> within a <code>calc()</code> function to set the maximum height of the tooltip to be two times the height of the anchor.</p>
<pre><code>.positioned-notice {
  position-anchor: --question-mark;
  /*  set max height of the tooltip to 2x height of the anchor  */
  max-height: calc(anchor-size(height) * 2);
}
</code></pre>
<figure>
  <figcaption>Demo for <code>anchor-size</code></figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-5_2880.png 2880w" /></p>
<h2 id="use_anchor_with_top-layer_elements_like_popover_and_dialog">Use anchor with top-layer elements like popover and dialog</h2>
<p>Anchor positioning works incredibly well with top-layer elements like <a target="_blank" href="https://web.dev/blog/popover-api"><code>popover</code></a>. and <code>&lt;dialog&gt;</code>. While these elements are placed in a separate layer from the rest of the DOM subtree, anchor positioning lets you tether them back to, and scroll along with elements not in the top layer. This is a huge win for layered interfaces.</p>
<p>In the following example, a set of tooltip popovers are triggered open using a button. The button is the anchor and the tooltip is the positioned element. You can style the positioned element just like any other anchored element. For this specific example, the <code>anchor-name</code> and <code>position-anchor</code> are inline styles on the button and tooltip. Because each anchor needs a unique anchor name, when generating dynamic content, inlining is the easiest way to do this.</p>
<figure>
  <figcaption>Demo using anchor with <code>popover</code></figcaption>
</figure>
<p><img src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6.png" alt="Screenshot of the demo." srcset="https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_36.png 36w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_48.png 48w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_72.png 72w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_96.png 96w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_480.png 480w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_720.png 720w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_856.png 856w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_960.png 960w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_1440.png 1440w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_1920.png 1920w, https://developer.chrome.com/static/blog/anchor-positioning-api/image/anchor-demo-6_2880.png 2880w" /></p>
<h2 id="adjust_anchor_positions_with_position-try">Adjust anchor positions with <code>@position-try</code></h2>
<p>Once you have your initial anchor position, you may want to adjust the position if the anchor reaches the edges of its containing block. To create alternative anchor positions, you can use the <code>@position-try</code> directive along with the <code>position-try-options</code> property.</p>
<p>In the following example, a submenu appears to the right of a menu. Menus and submenus are a great use of the anchor positioning API along with the <a target="_blank" href="https://web.dev/blog/popover-api">popover attribute</a>, as these menus tend to be anchored to a trigger button.</p>
<p>For this submenu, if there's not enough space horizontally, you can move it underneath the menu instead. To do this, first set up the initial position:</p>
<pre><code>#submenu {
  position: absolute;
  position-anchor: --submenu;
  /* initial position */
  margin-left: var(--padding);
  inset-area: right span-bottom;
}
</code></pre>
<p>Then, set up your fallback anchored positions using <code>@position-try</code>:</p>
<pre><code>/* alternate position */
@position-try --bottom {
  margin: var(--padding) 0 0 var(--padding);
  inset-area: bottom;
}
</code></pre>
<p>Finally, connect the two with <code>position-try-options</code>. All together, it looks like this:</p>
<pre><code>#submenu {
  position: absolute;
  position-anchor: --submenu;
  /* initial position */
  margin-left: var(--padding);
  inset-area: right span-bottom;
  */ connect with position-try options */
  position-try-options: --bottom;
}
/* alternate position */
@position-try --bottom {
  margin: var(--padding) 0 0 var(--padding);
  inset-area: bottom;
}
</code></pre>
<figure>
  <figcaption>Demo using anchor with <code>popover</code></figcaption>
</figure>
<video autoplay loop muted controls>
  <source src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/submenu-demo.mp4" type="video/mp4"></source>
</video>
<h2 id="anchor_position_auto-flip_keywords">Anchor position auto-flip keywords</h2>
<p>If you have a basic adjustment, such as flipping from top to bottom or left to right (or both), you can even skip the step of creating custom <code>@position-try</code> declarations and use the built-in browser-supported flip keywords like <code>flip-block</code> and <code>flip-inline</code>. These work as stand-ins for custom <code>@position-try</code> declarations, and can be used in combination with each other:</p>
<pre><code>position-try-options: flip-block, flip-inline, flip-block flip-inline;
</code></pre>
<p>Flip keywords can significantly simplify your anchor code. With just a few lines, you can create a fully-functional anchor with alternative positions:</p>
<pre><code>#my-tooltip {
  position-anchor: --question-mark;
  inset-area: top;
  position-try-options: flip-block;
}
</code></pre>
<figure>
  <figcaption>Using auto flip with <code>position-try-options: flip-block</code></figcaption>
</figure>
<video autoplay loop muted controls>
  <source src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/flip-demo.mp4" type="video/mp4"></source>
</video>
<p>There are some cases in which you may want to anchor an element within a subscroller of the page. In these instances, you can control the visibility of the anchor using <code>position-visibility</code>. When does the anchor stay in view? When does it disappear? You have control over these options with this feature. You use <code>position-visibility: anchors-visible</code> when you want the positioned element to stay in view until the anchor is out of view:</p>
<pre><code>#tooltip {
  position: fixed;
  position-anchor: --anchor-top-anchor;
  position-visibility: anchors-visible;
  bottom: anchor(top);
}
</code></pre>
<figure>
  <figcaption><code>position-visibility: anchors-visible</code> Demo</figcaption>
</figure>
<video autoplay loop muted controls>
  <source src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/visibility-demo.mp4" type="video/mp4"></source>
</video>
<p>Alternatively, you use <code>position-visibility: no-overflow</code> to prevent the anchor from overflowing its container.</p>
<pre><code>#tooltip {
  position: absolute;
  position-anchor: --anchor-top-anchor;
  position-visibility: no-overflow;
  bottom: anchor(top);
}
</code></pre>
<figure>
  <figcaption><code>position-visibility: no-overflow</code> Demo</figcaption>
</figure>
<video autoplay loop muted controls>
  <source src="https://developer.chrome.com/static/blog/anchor-positioning-api/image/visibility-demo-2.mp4" type="video/mp4"></source>
</video>
<h2 id="feature_detection_and_polyfilling">Feature detection and polyfilling</h2>
<p>Because browser support is limited at this time, you likely want to use this API with some precautions. First, you can check for support directly in CSS by using the <a target="_blank" href="https://developer.mozilla.org/docs/Web/CSS/@supports"><code>@supports</code></a> feature query. The way to do this is to wrap your anchor styles in the following:</p>
<pre><code>@supports (anchor-name: --myanchor) {
  /* Anchor styles here */
}
</code></pre>
<p>Additionally, you can polyfill the anchor positioning feature with <a target="_blank" href="https://github.com/oddbird/css-anchor-positioning">the CSS anchor positioning polyfill by Oddbird</a>, which works from Firefox 54, Chrome 51, Edge 79, and Safari 10. This polyfill supports most of the basic anchor position features, though the current implementation is not complete and contains some outdated syntax. You can use the unpkg link or import it directly in a package manager.</p>
<h2 id="a_note_on_accessibility">A note on accessibility</h2>
<p>While the anchor positioning API allows an element to be positioned relative to others, it doesn't inherently create any meaningful semantic relationship between them. If there actually is a semantic relationship between the anchor element and the positioned element (for example the positioned element is a sidebar comment about the anchor text), one way to do that is to use <code>aria-details</code> to point from the anchor element to the positioned element(s). Screen reader software is still learning how to deal with aria-details, but support is improving.</p>
<pre><code>&lt;div class="anchor" aria-details="sidebar-comment"&gt;Main content&lt;/div&gt;
&lt;div class="positioned" id="sidebar-comment"&gt;Sidebar content&lt;/div&gt;
</code></pre><pre><code>.anchor {
  anchor-name: --anchor;
}
.positioned {
  position: fixed;
  position-anchor: --anchor;
}
</code></pre>
<p>If you are using anchor positioning with the <code>popover</code> attribute or with a <code>&lt;dialog&gt;</code> element, the browser will handle the focus navigation corrections for proper accessibility, so you don't need to have your popovers or dialogs in DOM order. Read more on the note on <a target="_blank" href="https://drafts.csswg.org/css-anchor-position-1/#accessibility">accessibility</a> in the spec.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This is a brand new feature and we're excited to see what you build with it. So far, we've seen some really neat use cases from the community like dynamic labels in charts, connector lines, footnotes, and visual cross-referencing. While you're experimenting with anchor positioning, we'd love to hear your feedback and if you find any bugs, <a target="_blank" href="https://issues.chromium.org/issues/new?component=1456721">let us know</a>.</p>
<h3 id="further_reading">Further reading</h3>
<ul>
<li><a target="_blank" href="https://frontendmasters.com/blog/drawing-a-line-to-connect-elements-with-css-anchor-positioning/">Drawing a Line to Connect Elements with CSS Anchor Positioning</a></li>
<li><a target="_blank" href="https://kizu.dev/anchor-positioning-experiments/">Future CSS: Anchor positioning by Roman Komarov</a></li>
<li><a target="_blank" href="https://codepen.io/collection/ExkRWw">Una's Codepen Collection of Anchor demos</a></li>
<li><a target="_blank" href="https://developer.chrome.com/blog/anchor-positioning-api/anchor-tool.com">Anchor positioning tool</a></li>
</ul>
</div>]]></content:encoded>
			</item>
			<item>
			<title>Phoenix LiveView 1.0-rc is here! - Phoenix Blog</title>
			<description>Posted on May 8th, 2024 by Chris McCord      LiveView 1.0.0-rc.0 is out!  This 1.0 milestone comes almost six years after the first LiveView commit.  Why LiveView  I started LiveView to scratch an...</description>
			<link>https://phoenixframework.org/blog/phoenix-liveview-1.0-released</link>
			<content:encoded><![CDATA[<div>
  <p>
    Posted on May 8th, 2024 by Chris McCord
  </p>
  <hr />
  <p>
LiveView 1.0.0-rc.0 is out!</p>
<p>
This 1.0 milestone comes almost six years after the first LiveView commit.</p>
<p>
  <img src="https://phoenixframework.org/images/blog/lv-1.0/commits.png" alt="" />
</p>
<h2>
Why LiveView</h2>
<p>
I started LiveView to scratch an itch. I wanted to create dynamic server-rendered applications without writing JavaScript. I was tired of the inevitable ballooning complexity that it brings.</p>
<p>
Think realtime form validations, updating the quantity in a shopping cart, or real-time streaming updates. Why does it require moving mountains to solve in a traditional stack? We write the HTTP glue or GraphQL schemas  and resolvers, then we figure out which validation logic needs shared or dup’d. It goes on and on from there – how do we get localization information to the client? What data serializers do we need? How do we wire up WebSockets and IPC back to our code? Is our js bundle getting too large? I guess it’s time to start turning the Webpack or Parcel knobs. Wait Vite is a thing now? Or I guess Bun configuration is what we want? We’ve all felt this pain.</p>
<p>
The idea was, what if we removed these problems entirely? HTTP can go away, and the server can handle all the rendering and dynamic update concerns. It felt like a heavy approach, but I knew Elixir and Phoenix was perfectly suited for it.</p>
<p>
Six years later this programming model still feels like cheating.  Everything is super fast. Payloads are tiny. Latency is best-in-class. Not only do you write less code, there’s simply less to think about when writing features.</p>
<h2>
Real-time foundations unlock superpowers</h2>
<p>
Interesting things happen when you give every user and UI a real-time, bidirectional foundation as a matter of course. You suddenly have superpowers. You almost don’t notice it. Being freed from all the mundane concerns of typical full-stack development lets you focus on just shipping features. And with Elixir, you start shipping features that other platforms can’t even conceive as possible.</p>
<p>
Want to <a target="_blank" href="https://fly.io/phoenix-files/phoenix-dev-blog-server-logs-in-the-browser-console/">ship real-time server logs to the js console in development</a>? No problem!</p>
<video src="https://phoenixframework.org/images/blog/lv-1.0/server-logs.mp4" autoplay="autoplay" loop="loop" controls="controls" muted="muted">
</video>
<p>
What about supporting production hot code upgrades where browsers can auto re-render anytime CSS stylesheets, images, or templates change – without losing state or dropping connections? Sure!</p>
<video src="https://phoenixframework.org/images/blog/lv-1.0/hot-deploy.mp4" autoplay="autoplay" loop="loop" controls="controls" muted="muted">
</video>
<p>
Or maybe you have an app deployed planet-wide where you do work across the cluster and aggregate the results in real-time back to the UI. Would you believe the entire LiveView, including the template markup and RPC calls, is <a target="_blank" href="https://github.com/fly-apps/wps/blob/0cd4f4d46e873b3a0937fe230d26f5a195687ecf/lib/wps_web/live/page_speed_live.ex">350 LOC</a>?</p>
<video src="https://phoenixframework.org/images/blog/lv-1.0/what.mp4" controls="controls">
</video>
<p>
These are the kinds of applications that LiveView enables. It feels incredible to ship these kinds of things, but it took a while to arrive here for good reasons. There was a lot to solve to make this programming model truly great.</p>
<h2>
How it started</h2>
<p>
Conceptually, what I really wanted is something like what we do in React – change some state, our template re-renders automatically, and the UI updates. But instead of a bit of UI running on the client, what if we ran it on the server? The LiveView could look like this:</p>
<pre><code><span>defmodule</span><span> </span><span>ThermoLive</span><span> </span><span>do</span><span>
  </span><span>def</span><span> </span><span>render</span><span>(</span><span>assigns</span><span>)</span><span> </span><span>do</span><span>
    </span><span>~H"""
    &lt;div id="thermostat"&gt;
      &lt;p&gt;Temperature: &lt;%= @thermostat.temperature %&gt;&lt;/p&gt;
      &lt;p&gt;Mode: &lt;%= @thermostat.mode %&gt;&lt;/p&gt;
      &lt;button phx-click="inc"&gt;+&lt;/button&gt;
      &lt;button phx-click="dec"&gt;-&lt;/button&gt;
    &lt;/div&gt;
    """</span><span>
  </span><span>end</span><span>
  </span><span>def</span><span> </span><span>mount</span><span>(</span><span>%{</span><span>"id"</span><span> </span><span>=&gt;</span><span> </span><span>id</span><span>}</span><span>,</span><span> </span><span>_session</span><span>,</span><span> </span><span>socket</span><span>)</span><span> </span><span>do</span><span>
    </span><span>thermostat</span><span> </span><span>=</span><span> </span><span>ThermoControl</span><span>.</span><span>get_thermostat!</span><span>(</span><span>id</span><span>)</span><span>
    </span><span>:ok</span><span> </span><span>=</span><span> </span><span>ThermoControl</span><span>.</span><span>subscribe</span><span>(</span><span>thermostat</span><span>)</span><span>
    </span><span>{</span><span>:ok</span><span>,</span><span> </span><span>assign</span><span>(</span><span>socket</span><span>,</span><span> </span><span>thermostat</span><span>:</span><span> </span><span>thermstat</span><span>)</span><span>}</span><span>
  </span><span>end</span><span>
  </span><span>def</span><span> </span><span>handle_info</span><span>(</span><span>{</span><span>ThermoControl</span><span>,</span><span> </span><span>%</span><span>ThermoStat</span><span>{</span><span>}</span><span> </span><span>=</span><span> </span><span>new_thermo</span><span>}</span><span>,</span><span> </span><span>_</span><span>,</span><span> </span><span>socket</span><span>)</span><span> </span><span>do</span><span>
    </span><span>{</span><span>:noreply</span><span>,</span><span> </span><span>assign</span><span>(</span><span>socket</span><span>,</span><span> </span><span>thermostat</span><span>:</span><span> </span><span>new_thermo</span><span>)</span><span>}</span><span>
  </span><span>end</span><span>
  </span><span>def</span><span> </span><span>handle_event</span><span>(</span><span>"inc"</span><span>,</span><span> </span><span>_</span><span>,</span><span> </span><span>socket</span><span>)</span><span> </span><span>do</span><span>
    </span><span>thermostat</span><span> </span><span>=</span><span> </span><span>ThermoControl</span><span>.</span><span>inc</span><span>(</span><span>socket</span><span>.</span><span>assigns</span><span>.</span><span>thermostat</span><span>)</span><span>
    </span><span>{</span><span>:noreply</span><span>,</span><span> </span><span>assign</span><span>(</span><span>socket</span><span>,</span><span> </span><span>thermostat</span><span>:</span><span> </span><span>thermostat</span><span>)</span><span>}</span><span>
  </span><span>end</span><span>
</span><span>end</span></code></pre>
<p>
Like React, we have a render function and something that sets our initial state when the LiveView mounts. When state changes, we call render with the new state and the UI is updated.</p>
<p>
Interactions like <code>phx-click</code> on the <code>+</code> or <code>-</code> button, can be sent as RPC’s from client to server and the server can respond with fresh page HTML. These client/server messages use Phoenix Channels which <a target="_blank" href="https://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections">scale to millions of connections per server</a>.</p>
<p>
Likewise, if the server wants to send an update to the client, such as another user changing the thermostat, the client can listen for it and replace the page HTML in the same fashion. My naive first pass on the <code>phoenix_live_view.js</code> client looked something like this.</p>
<pre><code><span>let</span><span> </span><span>main</span><span> </span><span>=</span><span> </span><span>document</span><span>.</span><span>querySelector</span><span>(</span><span>"[phx-main]"</span><span>)</span><span>
</span><span>let</span><span> </span><span>channel</span><span> </span><span>=</span><span> </span><span>new</span><span> </span><span>socket</span><span>.</span><span>channel</span><span>(</span><span>"lv"</span><span>)</span><span>
</span><span>channel</span><span>.</span><span>join</span><span>(</span><span>)</span><span>.</span><span>receive</span><span>(</span><span>"ok"</span><span>,</span><span> </span><span>(</span><span>{</span><span>html</span><span>}</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>main</span><span>.</span><span>innerHTML</span><span> </span><span>=</span><span> </span><span>html</span><span>)</span><span>
</span><span>channel</span><span>.</span><span>on</span><span>(</span><span>"update"</span><span>,</span><span> </span><span>(</span><span>{</span><span>html</span><span>}</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>main</span><span>.</span><span>innerHTML</span><span> </span><span>=</span><span> </span><span>html</span><span>)</span><span>
</span><span>window</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span><span> </span><span>e</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>
  </span><span>let</span><span> </span><span>event</span><span> </span><span>=</span><span> </span><span>e</span><span>.</span><span>getAttribute</span><span>(</span><span>"phx-click"</span><span>)</span><span>
  </span><span>if</span><span>(</span><span>!</span><span>event</span><span>)</span><span>{</span><span> </span><span>return</span><span> </span><span>}</span><span>
  </span><span>channel</span><span>.</span><span>push</span><span>(</span><span>"event"</span><span>,</span><span> </span><span>{</span><span>event</span><span>}</span><span>)</span><span>.</span><span>receive</span><span>(</span><span>"ok"</span><span>,</span><span> </span><span>(</span><span>{</span><span>html</span><span>}</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>main</span><span>.</span><span>innerHTML</span><span> </span><span>=</span><span> </span><span>html</span><span>)</span><span>
</span><span>}</span><span>)</span></code></pre>
<p>
This is how LiveView started. We went to the server for interactions, re-rendered the entire template on state change, and sent the entire page down to the client. The client then swapped out the inner HTML.</p>
<p>
It worked, but it was not great. Partial state changes required re-executing the entire template and sending down gobs of HTML for otherwise tiny updates.</p>
<p>
Still the basic programming model was exactly what I wanted. As HTTP fell away from my concerns, entire layers of full-stack considerations disappeared.</p>
<p>
Next the challenge was making this something truly great. Little did we know we’d accidentally our way to outperforming many SPA use-cases along the way.</p>
<h2>
How we optimized the programming model</h2>
<p>
LiveView’s diffing engine solved two problems with a single mechanism. The first problem was only executing those dynamic parts of a template that actually changed from a previous render. The second was only sending the minimal data necessary to update the client.</p>
<p>
It solves both by splitting the template into static and dynamic parts. Considering the following LiveView template:</p>
<pre><code><span>~H"""
&lt;p class={@mode}&gt;Temperature: &lt;%= format_unit(@temperature) %&gt;&lt;/p&gt;
"""</span></code></pre>
<p>
At compile time, we convert the template into a struct like this:</p>
<pre><code><span>%</span><span>Phoenix.LiveView.Rendered</span><span>{</span><span>
  </span><span>static</span><span>:</span><span> </span><span>[</span><span>"&lt;p class=</span><span>\"</span><span>"</span><span>,</span><span> </span><span>\</span><span>"&gt;Temperature:"</span><span>,</span><span> </span><span>"&lt;/p&gt;"</span><span>]</span><span>
  </span><span>dynamic</span><span>:</span><span> </span><span>fn</span><span> </span><span>assigns</span><span> </span><span>-&gt;</span><span>
    </span><span>[</span><span>
      </span><span>if</span><span> </span><span>changed?</span><span>(</span><span>assigns</span><span>,</span><span> </span><span>:mode</span><span>)</span><span>,</span><span> </span><span>do</span><span>:</span><span> </span><span>assigns</span><span>.</span><span>mode</span><span>,</span><span>
      </span><span>if</span><span> </span><span>changed?</span><span>(</span><span>assigns</span><span>,</span><span> </span><span>:temperature</span><span>)</span><span>,</span><span> </span><span>do</span><span>:</span><span> </span><span>format_unit</span><span>(</span><span>assigns</span><span>.</span><span>temperature</span><span>)</span><span>
    </span><span>]</span><span>
  </span><span>end</span><span>
</span><span>}</span></code></pre>
<p>
We know the static parts never change, so they are split from the dynamic Elixir expressions. Next, we compile each expression with change tracking based on the variables accessed within each expression. On render, we compare the previous template values with the new and only execute the template expression if the value has changed.</p>
<p>
Instead of sending the entire template down on change, we can send the client all the static and dynamic parts on <code>mount</code>. After mount  we only send the partial diff of dynamic values for each update.</p>
<p>
To see how this works, we can imagine the following payload being sent on <code>mount</code> for the template above:</p>
<pre><code><span>{</span><span>
  </span><span>s</span><span>:</span><span> </span><span>[</span><span>"&lt;p class=</span><span>\"</span><span>"</span><span>,</span><span> </span><span>"&gt;Temperature: "</span><span>,</span><span> </span><span>"&lt;/p&gt;"</span><span>]</span><span>,</span><span>
  </span><span>0</span><span>:</span><span> </span><span>"cooling"</span><span>,</span><span>
  </span><span>1</span><span>:</span><span> </span><span>"68℉"</span><span>
</span><span>}</span></code></pre>
<p>
The client receives a map of static values in the <code>s</code> key, and dynamic values keyed by their index in the statics. For the client to render the full template string, it only needs to zips the static list with the dynamic values. For example:</p>
<pre><code><span>[</span><span>"&lt;p class=</span><span>\"</span><span>"</span><span>,</span><span> </span><span>"cooling"</span><span>,</span><span> </span><span>"</span><span>\"</span><span>&gt;Temperature: "</span><span>,</span><span> </span><span>"68℉"</span><span>,</span><span> </span><span>"&lt;/p&gt;"</span><span>]</span><span>.</span><span>join</span><span>(</span><span>""</span><span>)</span><span>
</span><span>"&lt;p class=</span><span>\"</span><span>cooling</span><span>\"</span><span>&gt;Temperature: 68℉&lt;/p&gt;"</span></code></pre>
<p>
With the client holding a static/dynamic cache, optimizing network updates is no work at all. Any server render following <code>mount</code>  simply returns the new dynamic values at their known index. Unchanged dynamic values and statics are ignored entirely.</p>
<p>
If a LiveView runs <code>assign(socket, :temperature, 70)</code>, the <code>render/1</code> function is invoked, and the following payload gets sent down the wire:</p>
<pre><code><span>{</span><span>1</span><span>:</span><span> </span><span>"70℉"</span><span>}</span></code></pre>
<p>
Thats it! To update the UI, the client simply merges this object with its static/dynamic cache:</p>
<pre><code><span>{</span><span>                     </span><span>{</span><span>
                        </span><span>s</span><span>:</span><span> </span><span>[</span><span>"&lt;p class=</span><span>\"</span><span>"</span><span>,</span><span> </span><span>"&gt;Temperature: "</span><span>,</span><span> </span><span>"&lt;/p&gt;"</span><span>]</span><span>,</span><span>
                        </span><span>0</span><span>:</span><span> </span><span>"cooling"</span><span>,</span><span>
  </span><span>1</span><span>:</span><span> </span><span>"70F"</span><span>     </span><span>=&gt;</span><span>       </span><span>1</span><span>:</span><span> </span><span>"70℉"</span><span>
</span><span>}</span><span>                     </span><span>}</span></code></pre>
<p>
Then the data is zipped together on the client to produce the full HTML of the UI.</p>
<p>
Of course <code>innerHTML</code> updates blow away UI state and are expensive to perform. So like any client-side framework, we compute minimal DOM diffs to efficiently update the DOM. In fact, we’ve had folks migrate from React to Phoenix LiveView because <a target="_blank" href="https://podcast.thinkingelixir.com/156">LiveView client rendering was faster what their React app could offer</a>.</p>
<p>
Optimizations continued from there. Including fingerprinting, for comprehensions, tree sharing, and more. You can <a target="_blank" href="https://dashbit.co/blog/latency-rendering-liveview">read all about each optimization</a> on the Dashbit blog.</p>
<p>
We apply these optimizations <em>automatically and for free</em> thanks to our stateful client and server connection. Most other server rendered HTML solutions send the whole fragment on every update or require users to fine tune updates by hand.</p>
<h2>
Best in class latency</h2>
<p>
We’ve seen how LiveView payloads are smaller than the best hand-written JSON API or GraphQL query, but it’s even better than that. Every LiveView holds a connection to the server so page navigation happens via live navigation. TLS handshakes, current user auth, etc happen a <em>single time</em> for the lifetime of the user’s visit. This allows page navigation to happen via a single WebSocket frame, and fewer database queries for any client action. The result is fewer round trips from the client, and simply less work done by the server. This provides less latency for the end-user compared to an SPA fetching data or sending mutations up to a server.</p>
<p>
Holding a stateful connections comes at the cost of server memory, but it’s far cheaper than folks expect. At a baseline, a given channel connection consumes 40kb of memory. This gives a 1GB server a theoretical ceiling of ~25,000 concurrent LiveViews. Of course the more state you store, the more memory you consume, but you only hold onto the state you need. We also have <code>stream</code> primitives for handling large collections without impacting memory. Elixir and the Erlang VM were designed for this. Scaling a stateful system to millions of concurrent users isn’t theoretical – we do it all the time. See WhatsApp, Discord, or <a target="_blank" href="https://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections">our own benchmarks</a> as examples.</p>
<p>
With the programming model optimized on both client and server, we expanded into higher level building blocks that take advantage of our unique diffing engine.</p>
<h2>
Reusable Components with HEEx</h2>
<p>
Change tracking and minimal diffs were ground-breaking features, but our HTML templates still lacked composability. The best we could offer is “partial”-like template rendering where a function could encapsulate some partial template content. This works, but it composes poorly and is mismatched in the way we write markup. Fortunately Marlus Saraiva from the <a target="_blank" href="https://surface-ui.org/">Surface project</a> spearheaded development of an HTML-aware component system and contributed back to the LiveView project. With HEEx components, we have a declarative component system, HTML validation, and  compile-time checking of component attributes and slots.</p>
<p>
HEEx components are just annotated functions. They look like this:</p>
<pre><code><span>@doc</span><span> </span><span>"""
Renders a button.
## Examples
    &lt;.button&gt;Send!&lt;/.button&gt;
    &lt;.button phx-click="go"&gt;Send!&lt;/.button&gt;
"""</span><span>
</span><span>attr</span><span> </span><span>:type</span><span>,</span><span> </span><span>:string</span><span>,</span><span> </span><span>default</span><span>:</span><span> </span><span>nil</span><span>
</span><span>attr</span><span> </span><span>:rest</span><span>,</span><span> </span><span>:global</span><span>,</span><span> </span><span>include</span><span>:</span><span> </span><span>~w(disabled form name value)</span><span>
</span><span>slot</span><span> </span><span>:inner_block</span><span>,</span><span> </span><span>required</span><span>:</span><span> </span><span>true</span><span>
</span><span>def</span><span> </span><span>button</span><span>(</span><span>assigns</span><span>)</span><span> </span><span>do</span><span>
  </span><span>~H"""
  &lt;button
    type={@type}
    class="rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3 text-white"
    {@rest}
  &gt;
    &lt;%= render_slot(@inner_block) %&gt;
  &lt;/button&gt;
  """</span><span>
</span><span>end</span></code></pre>
<p>
An invalid call to a component, such as <code>&lt;.button click="bad"&gt;</code> produces a compile-time warning:</p>
<pre><code>warning: undefined attribute "click" for component AppWeb.CoreComponents.button/1
  lib/app_web/live/page_live.ex:123: (file)</code></pre>
<p>
Slots allows the component to accept arbitrary content from a caller. This allows components to be much more extensible by the caller without creating a bunch of bespoke partial templates to handle every scenario.</p>
<h2>
HEEx markup annotations</h2>
<p>
Gone are the days of examining your browser’s HTML and then hunting for where that HTML was generated within your code. The final browser markup can be rendered  within several nested layers of component calls. How do we quickly trace back who rendered what?</p>
<p>
HEEx solves this with a <code>debug_heex_annotations</code> configuration. When set, all rendered markup will be annotated with the file:line of the function component definition, <em>as well as,</em> the file:line of the caller invocation of the component. In practice your dev HTML will look like this in the browser inspector:</p>
<p>
  <img src="https://phoenixframework.org/images/blog/lv-1.0/heex-anno.png" alt="Debug HEEx annotations" />
</p>
<p>
It annotates the document both at the caller site and the function component definition. If you find the above hard to navigate, you can use the new <code>Phoenix.LiveReloader</code> features that have your editor jump to an element’s nearest caller or definition file:line when clicked with a special key sequence of your choosing.</p>
<p>
Let’s see it in action:</p>
<video src="https://phoenixframework.org/images/blog/lv-1.0/keydebug.mp4" autoplay="autoplay" loop="loop" controls="controls" muted="muted">
</video>
<p>
First, we can see how holding <code>c</code> while clicking jumped to the caller file:Line location for that <code>&lt;.button&gt;</code> invocation. Next, we see that holding <code>d</code> while clicking the button jumped to the function definition file:line.</p>
<p>
This is such a simple quality of life improvement. It will become a key part of your workflow as soon as you try it out.</p>
<h2>
Interactive Uploads</h2>
<p>
A few years ago, LiveView tackled the file upload problem. Something that should be easy has historically been unnecessarily difficult. We wanted a single abstraction for interactive uploads for both direct to cloud, and direct to server use-cases.</p>
<p>
With a few lines of server code you can have file uploads with drag and drop, file progress, selection pruning, file previews, and more.</p>
<p>
More recently, we defined an <code>UploadWriter</code> behavior. This gives you access to the raw upload stream as it’s being chunked by the client. This lets you do things like <a target="_blank" href="https://fly.io/phoenix-files/streaming-uploads-with-liveview/">stream uploads to a different server</a> or <a target="_blank" href="https://youtu.be/GICJ42OyBGg?si=8SaAL2Sh74qsFaI3&amp;t=1930">transcode a video as it’s being uploaded</a>.</p>
<p>
Since the uploads happen over the existing LiveView connection, reflecting the upload progress or advanced file operations <a target="_blank" href="https://github.com/fly-apps/thumbnail_generator/blob/ce7e2ede394eed3b2a1b1aa5e41d323643950f5e/lib/thumbs_web/live/home_live.ex">become trivial to implement</a>:</p>
<video src="https://phoenixframework.org/images/blog/lv-1.0/puppy.mp4" autoplay="autoplay" loop="loop" controls="controls">
</video>
<h2>
Streams and Async</h2>
<p>
Following uploads, we shipped a streams primitive for efficiently handling large collections without needing to hold those collections in server memory. We also introduced <code>assign_async</code> and <code>start_async</code> primitives, which makes handling async operations and rendering async results a breeze.</p>
<p>
For example, imagine you have an expensive operation that calls out to an external service. The results can be latent or spotty, or both.  Your LiveView can use <code>assign_async/2</code> to offload this operation to a new process and <code>&lt;.async_result&gt;</code> to render the results with each loading, success, or failure state.</p>
<pre><code><span>def</span><span> </span><span>render</span><span>(</span><span>assigns</span><span>)</span><span> </span><span>do</span><span>
  </span><span>~H"""
  &lt;.async_result :let={org} assign={@org}&gt;
    &lt;:loading&gt;Loading organization &lt;.spinner /&gt;&lt;/:loading&gt;
    &lt;:failed :let={_failure}&gt;there was an error loading the organization&lt;/:failed&gt;
    &lt;%= org.name %&gt;
  &lt;/.async_result&gt;
  """</span><span>
</span><span>end</span><span>
</span><span>def</span><span> </span><span>mount</span><span>(</span><span>%{</span><span>"slug"</span><span> </span><span>=&gt;</span><span> </span><span>slug</span><span>}</span><span>,</span><span> </span><span>_</span><span>,</span><span> </span><span>socket</span><span>)</span><span> </span><span>do</span><span>
  </span><span>{</span><span>:ok</span><span>,</span><span> </span><span>assign_async</span><span>(</span><span>:org</span><span>,</span><span> </span><span>fn</span><span> </span><span>-&gt;</span><span> </span><span>{</span><span>:ok</span><span>,</span><span> </span><span>%{</span><span>org</span><span>:</span><span> </span><span>fetch_org</span><span>(</span><span>slug</span><span>)</span><span>}</span><span>}</span><span> </span><span>end</span><span>)</span><span>}</span><span>
</span><span>end</span></code></pre>
<p>
Now instead of worrying about an async task crashing the UI, or carefully monitoring async ops while updating the template with a bunch of conditionals, you have a single abstraction for performing the work and rendering the results. As soon as the LiveView disconnects, the async processes are cleaned up, ensuring no wasted resources go to a UI that is no longer around.</p>
<p>
Here we can also see slots in action with the <code>&lt;:loading&gt;</code> and <code>&lt;:failed&gt;</code> slots of the  <code>&lt;.async_result&gt;</code> function component. Slots allow the caller to extend components with their own dynamic content, including their own markup and function component calls.</p>
<h2>
LiveView goes mainstream</h2>
<p>
LiveView and <a target="_blank" href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor">.NET Blazor</a> both started about the same time. I like to think both projects helped spearhead the adoption of this programming model.</p>
<p>
Since getting started, this model has been embraced in various ways in the Go, Rust, Java, PHP, JavaScript, Ruby, and Haskell communities. And I’m sure others I haven’t yet heard of.</p>
<p>
Most don’t offer LiveView’s declarative model. Instead developers are required to annotate how individual elements are updated and removed, leading to fragile applications, akin to client-side applications before the introduction of React and other declarative frameworks. Most also lack the optimizations LiveView developers get for free. Large payloads are sent on every event unless developers manually fine tune them.</p>
<p>
React itself liked the idea of putting React on the server so much, they shipped their own <a target="_blank" href="https://react.dev/reference/rsc/server-components">React Server Components</a> to tackle a cross section of similar goals with LiveView. In the case of RSC, pushing real-time events are left to external means.</p>
<p>
React, like most, chose different tradeoffs because <em>they had no choice</em>. The majority skip the stateful, bidirectional communication layer because most platforms are poorly suited for it. Elixir and the Erlang VM are truly what make this programming model shine. And we have only barely discussed our built-in globally distributed clustering and PubSub. There are truly extraordinary features built into the platform that are at your fingertips.</p>
<h2>
What’s Next</h2>
<p>
We encourage folks to try out 1.0-rc in their applications and report any issues or bugs. Check the <a target="_blank" href="https://github.com/phoenixframework/phoenix_live_view/blob/main/CHANGELOG.md">changelog</a> for breaking changes to bring your existing apps up to speed. Following the RC phase, we’ll be continuing efforts around collocated JavaScript hooks, Web Component integration, navigation guards, and more as outlined in our issue tracker.</p>
<h2>
Special Thanks</h2>
<p>
Arriving here wouldn’t have been possible without the help of the Phoenix team, especially Steffen Deusch, who has tackled countless LiveView issues for the last several months.</p>
<p>
Happy Hacking!</p>
<p>
–Chris</p>
  <hr />
      </div>]]></content:encoded>
			</item>
			<item>
			<title>How an empty S3 bucket can make your AWS bill explode</title>
			<description>Update 7.05.2024The S3 team is working on a fix:https:&#x2F;&#x2F;twitter.com&#x2F;jeffbarr&#x2F;status&#x2F;1785386554372042890Imagine you create an empty, private AWS S3 bucket in a region of your preference. What will your AWS...</description>
			<link>https://medium.com/@maciej.pocwierz/how-an-empty-s3-bucket-can-make-your-aws-bill-explode-934a383cb8b1</link>
			<content:encoded><![CDATA[<div><div><a target="_blank" href="https://medium.com/@maciej.pocwierz?source=post_page-----934a383cb8b1--------------------------------"><div><p><img alt="Maciej Pocwierz" src="https://miro.medium.com/v2/resize:fill:88:88/1*rxc9iAV1V1h8OBSmiddCog.jpeg" /></p></div></a></div><blockquote><p><strong>Update 7.05.2024<br /></strong>The S3 team is working on a fix:<br /><a href="https://twitter.com/jeffbarr/status/1787844682216792163" target="_blank">https://twitter.com/jeffbarr/status/1785386554372042890</a></p></blockquote><p>Imagine you create an empty, private AWS S3 bucket in a region of your preference. What will your AWS bill be the next morning?</p><p>A few weeks ago, I began working on a PoC of a document indexing system for my client. I created a single S3 bucket in the <em>eu-west-1</em> region and uploaded some files there for testing. Two days later, I checked my AWS billing page, primarily to make sure that what I was doing was well within the free-tier limits. Apparently, it wasn’t. My bill was over $1,300, with the billing console showing nearly 100,000,000 S3 PUT requests executed within just one day!</p><figure><figcaption>My billed S3 usage per day, per region</figcaption></figure><h2 id="2e9e">Where were these requests coming from?</h2><p>By default, AWS doesn’t log requests executed against your S3 buckets. However, such logs can be enabled using <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/cloudtrail-logging.html" target="_blank">AWS CloudTrail</a> or <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html" target="_blank">S3 Server Access Logging</a>. After enabling CloudTrail logs, I immediately observed thousands of write requests originating from multiple accounts or entirely outside of AWS.</p><h2 id="f863">But why would some third parties bombard my S3 bucket with unauthorised requests?</h2><p>Was it some kind of DDoS-like attack against my account? Against AWS? As it turns out, <strong>one of the popular open-source tools had a default configuration to store their backups in S3. And, as a placeholder for a bucket name, they used… the same name that I used for my bucket</strong>. This meant that every deployment of this tool with default configuration values attempted to store its backups in my S3 bucket!</p><blockquote><p>Note: I can’t disclose the name of the tool I’m referring to, as that would put the impacted companies at risk of data leak (as explained further).</p></blockquote><p>So, a horde of misconfigured systems is attempting to store their data in my private S3 bucket. But why should I be the one paying for this mistake? Here’s why:</p><h2 id="2a1a">S3 charges you for unauthorized incoming requests</h2><p>This was confirmed in my exchange with AWS support. As they wrote:</p><blockquote><p>Yes, S3 charges for unauthorized requests (4xx) as well[1]. That’s expected behavior.</p></blockquote><p>So, if I were to open my terminal now and type:</p><pre><span>aws s3 cp ./file.txt s3://your-bucket-name/random_key</span></pre><p>I would receive an <em>AccessDenied</em> error, but you would be the one to pay for that request. And I don’t even need an AWS account to do so.</p><p>Another question was bugging me: why was over half of my bill coming from the <em>us-east-1</em> region? I didn’t have a single bucket there! The answer to that is that <strong>the S3 requests without a specified region default to <em>us-east-1 </em>and are redirected as needed. And the bucket’s owner pays extra for that redirected request.</strong></p><h2 id="aec7">The security aspect</h2><p>We now understand why my S3 bucket was bombarded with millions of requests and why I ended up with a huge S3 bill. At that point, I had one more idea I wanted to explore. If all those misconfigured systems were attempting to back up their data into my S3 bucket, why not just let them do so? <strong>I opened my bucket for public writes and collected over 10GB of data within less than 30 seconds</strong>. Of course, I can’t disclose whose data it was. But it left me amazed at how an innocent configuration oversight could lead to a dangerous data leak!</p><h2 id="9b8c">What did I learn from all this?</h2><h2 id="c083">Lesson 1: Anyone who knows the name of any of your S3 buckets can ramp up your AWS bill as they like.</h2><p>Other than deleting the bucket, there’s nothing you can do to prevent it. You can’t protect your bucket with services like CloudFront or WAF when it’s being accessed directly through the S3 API. Standard S3 PUT requests are priced at just <a href="https://aws.amazon.com/s3/pricing/" target="_blank">$0.005 per 1,000 requests</a>, but a single machine can easily execute thousands of such requests per second.</p><h2 id="3484">Lesson 2: Adding a random suffix to your bucket names can enhance security.</h2><p>This practice reduces vulnerability to misconfigured systems or intentional attacks. At least avoid using short and common names for your S3 buckets.</p><h2 id="2a08">Lesson 3: When executing a lot of requests to S3, make sure to explicitly specify the AWS region.</h2><p>This way you will avoid additional costs of S3 API redirects.</p><h2 id="7c33">Aftermath:</h2><ol><li>I reported my findings to the maintainers of the vulnerable open-source tool. They quickly fixed the default configuration, although they can’t fix the existing deployments.</li><li>I notified the AWS security team. I suggested that they restrict the unfortunate S3 bucket name to protect their customers from unexpected charges, and to protect the impacted companies from data leaks. But they were unwilling to address misconfigurations of third-party products.</li><li>I reported the issue to two companies whose data I found in my bucket. They did not respond to my emails, possibly considering them as spam.</li><li>AWS was kind enough to cancel my S3 bill. However, they emphasized that this was done as an exception.</li></ol><p>Thank you for taking the time to read my post. I hope it will help you steer clear of unexpected AWS charges!</p></div>]]></content:encoded>
			</item>
			<item>
			<title>Are Inline Styles Faster than CSS?</title>
			<description>I recently migrated my website from CSS-in-JS to inline styles and discovered that inline styles improved the load performance of my website. Based on this discovery, I wrote a blog post suggesting that...</description>
			<link>https://danielnagy.me/posts/Post_tsr8q6sx37pl</link>
			<content:encoded><![CDATA[<div><article><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=160 3x" /></p></div><img alt="Old people racing on electric scooters" src="https://danielnagy.me/assets/scooter_race_1280x720.webp" /><p>I recently migrated my website from CSS-in-JS to inline styles and discovered that inline styles improved the load performance of my website. Based on this discovery, I wrote a blog post suggesting that switching to inline styles could improve a website's performance.</p><p>When I shared my post on internet forums, people correctly pointed out that migrating from a specific CSS-in-JS library to inline styles was too ambiguous to suggest that inline styles could be faster than CSS.</p><p>Many people were convinced that CSS was faster than inline styles. In an effort to seek the truth, I decided to conduct a less ambiguous and more conclusive experiment.</p><p>To perform this experiment, I migrated my website to CSS. Yes, I migrated my entire website to CSS, and yes, it was incredibly tedious.</p><p>I used <a target="_blank" href="https://getbem.com/">BEM</a> for styling my components, and I used atomic CSS for styling elements that were not explicit components. I ended up with a little more than 2,000 lines of handwritten CSS.</p><p>I built three versions of my React app. The first version was the control using inline styles.</p><pre><code><p><span>&lt;</span><span>div</span><span> </span><span>style</span><span>=</span><span>"</span><span>color</span><span>:</span><span> blue</span><span>;</span><span>"</span><span> </span><span>/&gt;</span></p></code></pre><p>The second version used a CSS file.</p><pre><code><p><span>&lt;</span><span>link</span><span> </span><span>rel</span><span>=</span><span>"</span><span>stylesheet</span><span>"</span><span> </span><span>href</span><span>=</span><span>"</span><span>index-27557ee9.css</span><span>"</span><span> </span><span>/&gt;</span></p></code></pre><p>And for the third version, I inlined the CSS in a style tag in the head of the document. I will refer to this as inline CSS.</p><pre><code><p><span>&lt;</span><span>style</span><span>&gt;</span></p><div><p><span>  </span><span>/* CSS here */</span></p></div><p><span>&lt;/</span><span>style</span><span>&gt;</span></p></code></pre><p>I deployed all three versions to a single preview environment for testing. I could switch between the different versions using a query parameter in the URL. I then took measurements of the following:</p><ul><li>Server render time</li><li>HTML size</li><li>JavaScript bundle size</li><li>Browser render time</li><li>Web vitals</li></ul><p>This is an n-of-1 experiment, but my website is more complex than a todo app and more realistic than a synthetic benchmark. Here are the results.</p><h2 id="server-render-time">Server Render Time</h2><p>I render my React application on the server and send the pre-rendered HTML to the browser. I measured the time it took to render my application on the server for my home page and for my blog post about deploying a React app to Vercel.</p><p>I selected my home page because it is often the first page my users see. In addition, I selected my blog post about deploying a React app to Vercel because it is my longest blog post to date and, therefore, has the most HTML (over 6,000 nodes). For consistency, I conducted all my experiments using these two pages.</p><p>Here is some pseudocode for how I measured the time it took to render my application.</p><pre><code><p><span>const</span><span> start </span><span>=</span><span> performance</span><span>.</span><span>now</span><span>(</span><span>)</span><span>;</span></p><p><span>await</span><span> </span><span>render</span><span>(</span><span>&lt;</span><span>App</span><span> </span><span>/&gt;</span><span>)</span><span>;</span></p><p><span>const</span><span> end </span><span>=</span><span> performance</span><span>.</span><span>now</span><span>(</span><span>)</span><span>;</span></p><p><span>const</span><span> total </span><span>=</span><span> end </span><span>-</span><span> start</span><span>;</span></p></code></pre><p>I calculated the average render time for each page, and here are the results.</p><label>Select page</label><div><p><span>Render Time</span></p><p><span>Measurements taken on a Fly.io micro-vm with 1 core of shared CPU and 1GB of memory (lower is better)</span></p></div><p>The time it took to render my React app was very inconsistent. However, when I took the average, the times were nearly identical.</p><p>The reason for the inconsistency is likely IO. I make some amount of API requests on each page, which is inherently variable in time.</p><p>However, there was no measurable correlation between inline styles and the time it took to render my application on the server. It would appear that the time it takes to stringify my inline styles is insignificant.</p><p>I'll admit that, since IO is happening, this test is not conclusive. It would be better to eliminate all variables. However, for static websites, the rendered HTML could be cached, and, in that case, the time it takes to render doesn't matter as much.</p><h2 id="html-size">HTML Size</h2><p>Here is a size comparison of the HTML generated by each version of my app.</p><label>Select page</label><div><p><span>HTML Size</span></p><p><span>(lower is better)</span></p></div><p>As you might expect, inline styles produced the largest HTML documents. However, after compression, the difference wasn't very significant.</p><p>What's interesting is that after compression, inline styles produced smaller documents than inline CSS. I believe this is because there is more repetition of inline styles, making them ideal for compression.</p><h2 id="javascript-bundle-size">JavaScript Bundle Size</h2><p>Here is a size comparison of the JavaScript generated by each version of my app.</p><div><p><span>JavaScript Bundle Size</span></p><p><span>(lower is better)</span></p></div><p>Inline styles did increase the size of my JavaScript bundle. But again, after compression, the difference was insignificant. Remarkably, styling my entire website using inline styles only increased my JavaScript bundle by <strong>1 kB</strong> after compression!</p><p>I want to point out that the size of my CSS file, minified and brotli'd, is <strong>8.9 kB</strong>. That means inline styles actually resulted in the fewest bytes over the wire! At least for the first page visit before anything is cached in the browser.</p><p>I do not currently code-split my JavaScript, but if I did, then inline styles would naturally get chunked up as well.</p><h2 id="browser-render-time">Browser Render Time</h2><p>Now let's have a look at browser render performance for each version. For these tests, I allowed the browser to cache the CSS file.</p><label>Select page</label><div><p><span>Inline Styles</span></p><p><span>CSS</span></p><p><span>Inline CSS</span></p></div><p><span>0</span><span>Time (ms)</span><span>85</span></p><span>Measurements taken in Chrome v123.0.6312.87 developer tools for 576 nodes</span><p>Parse, style, layout, and paint are stages of the browser's rendering pipeline. It is how it turns HTML into pixels.</p><p>The chart shows how long it took the browser to render each page once it started parsing the HTML. It also shows the frequency and time spent in each stage of the rendering pipeline.</p><p>While inline styles wasn't always the fastest to render the entire page, it was consistently the fastest to put pixels on the screen. This can be seen by looking for the first paint indicator (FP) in the chart.</p><p>There are a couple interesting observations from this data. The first observation is that for small pages, like my home page, a fast computer may parse the HTML before it parses the CSS (even from the cache).</p><p>If you look closely at the CSS timeline for my home page you'll see a second blue bar. That is the browser parsing the CSS. It can't render anything until it parses the CSS because <strong>CSS is render blocking</strong>.</p><p>The other interesting observation is that the browser (at least Chrome) appears to parse HTML for roughly 10 milliseconds before attempting to ship a frame. For inline CSS, the browser may need to process multiple chunks of HTML before it finishes parsing the CSS.</p><p>Furthermore, both CSS and inline CSS appear to tax first paint. This is especially noticeable on low powered devices. This makes sense, if you give the browser a wall of CSS, it has to cut through all that CSS before it can render anything.</p><h2 id="web-vitals">Web Vitals</h2><p>To round things out let's compare web vitals for each version of my app. To measure web vitals on my own devices I used the <a target="_blank" href="https://github.com/GoogleChrome/web-vitals">web-vitals</a> npm package maintained by Google Chrome.</p><p>For these tests, I was connected to my home wifi (360 Mbps) and I allowed the browser to cache the CSS file.</p><label>Select page</label><label>Select browser</label><div><p><span>Web Vitals</span></p><div><p><span>Time (ms)</span></p><div><p><span>0</span></p><p><span>200</span></p><p><span>400</span></p><p><span>600</span></p><p><span>800</span></p><p><span>1000</span></p><p><span>1200</span></p><p><span>1400</span></p></div></div><p><span>Measurements taken in Chrome v123.0.6312.87 using web-vitals v3.5.2 on a 2019 MacBook Pro (lower is better)</span></p></div><p>More often than not, inline styles outperformed CSS when it came to <em>first contentful paint</em> (FCP) and <em>largest contentful paint</em> (LCP). This is consistent with the data for render performance.</p><p>There wasn't a measurable correlation between inline styles and <em>first input delay</em> (FID) or <em>interaction to next paint</em> (INP). Both inline styles and CSS were well below the 200 millisecond threshold to feel <em>instantaneous</em>.</p><p>Now let's take a look at <a target="_blank" href="https://developer.chrome.com/docs/lighthouse/overview">Lighthouse</a> and <a target="_blank" href="https://pagespeed.web.dev/">PageSpeed Insights</a> to see if the trend continues.</p><label>Select page</label><label>Select device</label><div><p><span>Web Vitals</span></p><p><span>(lower is better)</span></p></div><p>There appears to be a slight advantage to to inline styles and inline CSS compared to CSS on desktop. However, on mobile there is a significant advantage to inline styles and inline CSS compared to CSS.</p><p>Both Lighthouse and PageSpeed Insights show horrible performance for CSS on mobile. This is inconsistent with the data I collected from my own devices. I believe this is because, when they conduct their tests, the browser's cache is empty and the network speed is throttled.</p><p>If you think about it, the first time a user visits a website the browser's cache will be empty. This means the first experience a user has with a website will be the worst in terms of performance.</p><h2 id="conclusion">Conclusion</h2><p>There was no measurable correlation between inline styles and the time it took to render my React application on the server.</p><p>In addition, while inline styles did increase the size of my HTML and JavaScript, the difference was insignificant after compression. In fact, inline styles resulted in the fewest bytes total for the browser to download, at least on first page visit.</p><p>Furthermore, using inline styles the browser is able to start painting pixels earlier in the rendering process. This is especially true on mobile or low powered devices.</p><p>Over time, CSS will increase in size as more features are added to a website. This will negatively impact performance of existing pages.</p><p>Based on the data, I believe there is evidence to suggest that inline styles are better for performance than CSS. However, this may not be true for every website. I encourage people to do their own experiments and seek their own truth. The more data we collect the more we will understand.</p><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=160 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=320 3x" /></p><div><h2>Written by Daniel Nagy</h2><p>Daniel is a software engineer and full-stack web developer. He studied computer science at Ohio University and has been doing web development and hybrid mobile app development for over 8 years.</p></div></div><p>If you liked this post, then please consider donating or becoming a sponsor. Your support will help me produce more content that gives back to the community.</p><div><p><span>You will not receive notifications for new comments. If you are waiting for a reply, please check back periodically.</span></p></div><div><div><p><img src="https://avatars.githubusercontent.com/u/2255993?u=a8e07c3955ca9bd9ac4cc992a9e0b034e784e723&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/2255993?u=a8e07c3955ca9bd9ac4cc992a9e0b034e784e723&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/2255993?u=a8e07c3955ca9bd9ac4cc992a9e0b034e784e723&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/2255993?u=a8e07c3955ca9bd9ac4cc992a9e0b034e784e723&amp;v=4&amp;s=120 3x" /></p><p><span>Alexey Lyakhov</span><span>commented on Apr 13, 2024</span></p></div><p>The main problem with inline css is happens later, then you wish to setup strict Content Security Policy, and you understand that you have to set unsafe-inline, which is not recommended.
Or you have to rewrite all your inline styles as css</p></div><div><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=120 3x" /></p><p><span>Daniel Nagy<span> • Author</span></span><span>commented on Apr 13, 2024</span></p></div><div><p><strong>@Alexey Lyakhov</strong> That is a good callout that you have to use <code>style-src 'unsafe-inline'</code>, if you have a CSP, for inline styles to work.</p><p>It's my understanding that inline styles only pose a security risk if you have dynamic inline styles from user input or if your website, or one of its dependencies, has been compromised.</p><p>Do you know if static inline styles are a security risk? I don't believe they are.</p></div></div><div><div><p><img src="https://lh3.googleusercontent.com/a/ACg8ocJl9twLv_T3HYbMvNWM8LWqvfe2KW3B0yTxOq5PafjYjSgnGGIIPw=s40" srcset="https://lh3.googleusercontent.com/a/ACg8ocJl9twLv_T3HYbMvNWM8LWqvfe2KW3B0yTxOq5PafjYjSgnGGIIPw=s40, https://lh3.googleusercontent.com/a/ACg8ocJl9twLv_T3HYbMvNWM8LWqvfe2KW3B0yTxOq5PafjYjSgnGGIIPw=s80 2x, https://lh3.googleusercontent.com/a/ACg8ocJl9twLv_T3HYbMvNWM8LWqvfe2KW3B0yTxOq5PafjYjSgnGGIIPw=s120 3x" /></p><p><span>Wout Mertens</span><span>commented on Apr 14, 2024</span></p></div><div><p>Ok so I totally understand if you don't want to do this, but I suspect that using tailwind actually will result in less css overall, while being a lot like online styles, and will thus perform best.</p><p>It would be really enlightening to see this research amended with a tailwind version of the pages.</p></div></div><div><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=120 3x" /></p><p><span>Daniel Nagy<span> • Author</span></span><span>commented on Apr 14, 2024</span></p></div><div><p><strong>@Wout Mertens</strong> I agree that tailwind would likely scale better, in terms of size, than other methods of authoring CSS.</p><p>When it comes to load performance, however, I don't believe that it would perform best. Any CSS is a potential tax on first paint, and tailwind isn't exempt from that fact.</p><p>When it comes to repainting, tailwind may perform better than inline styles. It is theoretically less work for the browser to parse the <code>class</code> attribute than it is for it to parse the <code>style</code> attribute. It is unknown if this is significant or not. My blog post mainly focuses on load performance.</p></div></div><div><div><p><img src="https://lh3.googleusercontent.com/a/ACg8ocItqS9GM28SD1ehtbVPOzeEM_8BMD_-YxT80Zx2dVpkPgMlV13c=s40" srcset="https://lh3.googleusercontent.com/a/ACg8ocItqS9GM28SD1ehtbVPOzeEM_8BMD_-YxT80Zx2dVpkPgMlV13c=s40, https://lh3.googleusercontent.com/a/ACg8ocItqS9GM28SD1ehtbVPOzeEM_8BMD_-YxT80Zx2dVpkPgMlV13c=s80 2x, https://lh3.googleusercontent.com/a/ACg8ocItqS9GM28SD1ehtbVPOzeEM_8BMD_-YxT80Zx2dVpkPgMlV13c=s120 3x" /></p><p><span>Shirkit</span><span>commented on May 9, 2024</span></p></div><p><span>I'm surprised to see the huge difference in the mobile results. Maybe there's something else at play here? 6x difference is a suspiciously big diffence.</span></p></div><div><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=120 3x" /></p><p><span>Daniel Nagy<span> • Author</span></span><span>commented on May 9, 2024</span></p></div><div><p><strong>@shirkit</strong> Those differences were measured using Lighthouse and PageSpeed Insights. I can't pretend that I know exactly how those tools are conducting those tests.</p><p>When I conducted my own tests using the web-vitals package, the difference wasn't as extreme. I did allow the browser to cache the CSS, and I was connected to my home wifi, though. Which likely accounts for some of the difference.</p></div></div><div><div><p><img src="https://lh3.googleusercontent.com/a/ACg8ocLu3qTMEqTGaN_BV7SrpJiCneyxC2L27V59bsBZx5amyeTtytN5=s40" srcset="https://lh3.googleusercontent.com/a/ACg8ocLu3qTMEqTGaN_BV7SrpJiCneyxC2L27V59bsBZx5amyeTtytN5=s40, https://lh3.googleusercontent.com/a/ACg8ocLu3qTMEqTGaN_BV7SrpJiCneyxC2L27V59bsBZx5amyeTtytN5=s80 2x, https://lh3.googleusercontent.com/a/ACg8ocLu3qTMEqTGaN_BV7SrpJiCneyxC2L27V59bsBZx5amyeTtytN5=s120 3x" /></p><p><span>Aditya Mishra</span><span>commented on May 9, 2024 • Edited</span></p></div><p><span>You missed a very crucial detail, by separating styles in a separate </span><code>.css</code><span> file, you can re-use that file, what that means is on initial page load the </span><code>.css</code><span> file is loaded, but on next page loads, the file doesn't need to be refetched as browser will cache it, thus reducing your load time and even FCP &amp; LCP stuff.</span></p></div><div><div><p><img src="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/1622446?u=cf3a4d5a0fe6fad79cbcd005c4010a1294499514&amp;v=4&amp;s=120 3x" /></p><p><span>Daniel Nagy<span> • Author</span></span><span>commented on May 9, 2024</span></p></div><div><p><strong>@Aditya Mishra</strong> I did not miss that. In my tests, I allowed the browser to cache the CSS file.</p><p>Keep in mind that the first time a user visits your website, <strong>nothing will be cached</strong>. A user's first experience with your website is the worst in terms of performance.</p></div></div><div><div><p><img src="https://avatars.githubusercontent.com/u/57038566?u=3608eade7803fef43b373d01dca484569821befc&amp;v=4&amp;s=40" srcset="https://avatars.githubusercontent.com/u/57038566?u=3608eade7803fef43b373d01dca484569821befc&amp;v=4&amp;s=40, https://avatars.githubusercontent.com/u/57038566?u=3608eade7803fef43b373d01dca484569821befc&amp;v=4&amp;s=80 2x, https://avatars.githubusercontent.com/u/57038566?u=3608eade7803fef43b373d01dca484569821befc&amp;v=4&amp;s=120 3x" /></p><p><span>Hassan Abu-Jabir</span><span>commented on May 10, 2024</span></p></div><p><span>Maybe there could be a general rule of thumb abstracted from this measurement. The next intersting experiment would be to test what happens if we only inline some of the CSS. Maybe having all render blocking CSS as inline CSS and then loading everything else is the sweetspot. Intuitively speaking this should remove the second render step completely.</span></p></div></article></div>]]></content:encoded>
			</item>
			<item>
			<title>The Problem with Using a UUID Primary Key in MySQL — PlanetScale</title>
			<description>Table of contentsUniversally Unique Identifiers, also known as UUIDs, are designed to allow developers to generate unique IDs in a way that guarantees uniqueness without knowledge of other systems. These are...</description>
			<link>https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql</link>
			<content:encoded><![CDATA[<p><label>Table of contents</label></p><section><p>Universally Unique Identifiers, also known as UUIDs, are designed to allow developers to generate unique IDs in a way that guarantees uniqueness without knowledge of other systems. These are especially useful in a distributed architecture, where you have a number of systems and databases responsible for creating records. You might think that using UUIDs as a primary key in a database is a great idea, but when used incorrectly, they can drastically hurt database performance.</p><p>In this article, you'll learn about the downsides of using UUIDs as a primary key in your MySQL database.</p><h2 id="the-many-versions-of-uuids"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#the-many-versions-of-uuids">The many versions of UUIDs</a></h2><p>At the time of this writing, there are five official versions of UUIDs and three proposed versions. Let's take a look at each version to better understand how they work.</p><h3 id="uuidv1"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv1">UUIDv1</a></h3><p>A UUID version 1 is known as a time-based UUID and can be broken down as follows:</p><p>While much of modern computing uses the UNIX epoch time (Jan 1, 1970) as its base, UUIDs actually use a different date of Oct 10, 1568, which is the date that the Gregorian calendar started to be more widely used. The embedded timestamp within a UUID grows in 100 nanoseconds increments from this date, which is then used to set the <code>time_low</code>, <code>time_mid</code>, and <code>time_hi</code> segments of the UUID.</p><p>The third segment of the UUID contains the <code>version</code> as well as <code>time_hi</code> and occupies the first character of that segment. This is true for all versions of UUIDs as shown in subsequent examples. The <code>reserved</code> portion is also known as the <a target="_blank" href="https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.1">variant</a> of the UUID, which determines how the bits within the UUID are used. Finally, the last segment of the UUID is the <code>node</code>, which is the unique address of the system generating the UUID.</p><h3 id="uuidv2"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv2">UUIDv2</a></h3><p>Version 2 of the UUID implemented a change compared to version 1, where the <code>low_time</code> segment of the structure was replaced with a POSIX user ID. The theory was that these UUIDs could be traced back to the user account that generated them. Since the <code>low_time</code> segment is where much of the variability of UUIDs reside, replacing this segment increases the chance of collision. As a result, this version of the UUID is rarely used.</p><h3 id="uuidv3-and-v5"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv3-and-v5">UUIDv3 and v5</a></h3><p>Versions 3 and 5 of UUIDs are very similar. The goal of these versions is to allow UUIDs to be generated in a deterministic way so that, given the same information, the same UUID can be generated. These implementations use two pieces of information: a namespace (which itself is a UUID) and a name. These values are run through a hashing algorithm to generate a 128-bit value that can be represented as a UUID.</p><p>The key difference between these versions is that version 3 uses an MD5 hashing algorithm, and version 5 uses SHA1.</p><h3 id="uuidv4"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv4">UUIDv4</a></h3><p>Version 4 is known as the random variant because, as the name implies, the value of the UUID is almost entirely random. The exception to this is the first position in the third segment of the UUID, which will always be <code>4</code> to signify the version used.</p><h3 id="uuidv6"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv6">UUIDv6</a></h3><p>Version 6 is nearly identical to Version 1. The only difference is that the bits used to capture the timestamp are flipped, meaning the most significant portions of the timestamp are stored first. The graphic below demonstrates these differences.</p><p>The main reason for this is to create a value that is compatible with Version 1 while allowing these values to be more sortable since the most significant portion of the timestamp is upfront.</p><h3 id="uuidv7"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv7">UUIDv7</a></h3><p>Version 7 is also a time-based UUID variant, but it integrates the more commonly used Unix Epoch timestamp instead of the Gregorian calendar date used by Version 1. The other key difference is that the node (the value based on the system generating the UUID) is replaced with randomness, making these UUIDs less trackable back to their source.</p><h3 id="uuidv8"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuidv8">UUIDv8</a></h3><p>Version 8 is the latest version that permits vendor-specific implementations while adhering to RFC standards. The only requirement for UUIDv8 is that the version be specified in the first position of the third segment as all other versions.</p><h2 id="uuids-and-mysql"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#uuids-and-mysql">UUIDs and MySQL</a></h2><p>Using UUIDs (mostly) guarantees uniqueness across all systems in your architecture, so you might be inclined to use them as primary keys for your records. Be aware that there are several tradeoffs to doing so when compared to an auto-incrementing integer.</p><h3 id="insert-performance"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#insert-performance">Insert performance</a></h3><p>Whenever a new record is inserted into a table in MySQL, the index associated with the primary key needs to be updated so querying the table is performant. Indexes in MySQL take the form of a B+ Tree, which is a multi-layered data structure that allows queries to quickly find the data they need.</p><p>The following diagram demonstrates what a relatively simple version of this structure looks like with six entries with values from 1 to 6. If a query comes asking for <code>5</code>, MySQL will start at the root node and know from there that it has to traverse down the right side of the tree to find what it's looking for.</p><div><p><strong>Note</strong></p><p>For simplicity, these diagrams display a B-Tree instead of a B+ Tree. The key difference is that in a B+Tree, the leaf nodes contain a reference to the actual data, while in a B-Tree, the leaf nodes do not.</p></div><p>If values 7-9 are added, MySQL will split the right node and rebalance the tree.</p><p>This process is known as page splitting, and the goal is to keep the B+ Tree structure balanced so that MySQL can quickly find the data it's looking for. With sequential values, this process is relatively straightforward; however, when randomness is introduced into the algorithm, it can take significantly longer for MySQL to rebalance the tree. On a high-volume database, this can hurt user experience as MySQL tries to keep the tree in balance.</p><h3 id="higher-storage-utilization"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#higher-storage-utilization">Higher storage utilization</a></h3><p>All primary keys in MySQL are indexed. By default, an auto-incrementing integer will consume 32 bits of storage per value. Compare this with UUIDs. If stored in a compact binary form, a single UUID would consume 128bits on disk. Already, that is 4x the consumption of a 32-bit integer. If instead you choose to use a more human readable string-based representation, each UUID could be stored as a <code>CHAR(36)</code>, consuming a whopping 688 bits per UUID. This means that each record would store over 20 times more data than the 32-bit integer.</p><p>In addition to the default index created on the primary key, secondary indexes will also consume more space. This is because secondary indexes use the primary key as a pointer to the actual row, meaning they need to be stored with the index. This can lead to a significant increase in storage requirements for your database depending on how many indexes are created on tables using UUIDs as the primary key.</p><p>Finally, page splitting (as described in the previous section) can also negatively impact storage utilization as well as performance. InnoDB assumes that the primary key will increment predictably, either numerically or lexicographically. If true, InnoDB will fill the pages to about 94% of the page size before creating a new page. When the primary key is random, the amount of space utilized from each page can be as low as 50%. Due to this, using UUIDs that incorporate randomness can lead to excessive use of pages to store the index.</p><h2 id="best-ways-to-use-a-uuid-primary-key-with-mysql"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#best-ways-to-use-a-uuid-primary-key-with-mysql">Best ways to use a UUID primary key with MySQL</a></h2><p>If you absolutely need to use UUIDs as the unique identifier for records in your table, there are a few best practices you can follow to minimize the negative side effects of doing so.</p><h3 id="use-the-binary-data-type"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#use-the-binary-data-type">Use the binary data type</a></h3><p>While UUIDs are often sometimes as 36-character strings, they can also be represented in their native binary format as well. If converted to a binary value, you can store it in a <code>BINARY(16)</code> column, which reduces the storage requirements per value down to 16 bytes. This is still quite a bit larger than a 32-bit integer, but is certainly better than storing the UUID as a <code>CHAR(36)</code>.</p><div><pre><code><p><span>create</span><span> </span><span>table</span><span> uuids</span><span>(</span><span></span>
</p><p><span>  UUIDAsChar </span><span>char</span><span>(</span><span>36</span><span>)</span><span> </span><span>not</span><span> </span><span>null</span><span>,</span><span></span>
</p><p><span>  UUIDAsBinary </span><span>binary</span><span>(</span><span>16</span><span>)</span><span> </span><span>not</span><span> </span><span>null</span><span></span>
</p><p><span></span><span>)</span><span>;</span><span></span>
</p><p><span></span><span>insert</span><span> </span><span>into</span><span> uuids </span><span>set</span><span></span>
</p><p><span>  UUIDAsChar </span><span>=</span><span> </span><span>'d211ca18-d389-11ee-a506-0242ac120002'</span><span>,</span><span></span>
</p><p><span>  UUIDAsBinary </span><span>=</span><span> UUID_TO_BIN</span><span>(</span><span>'d211ca18-d389-11ee-a506-0242ac120002'</span><span>)</span><span>;</span><span></span>
</p><p><span></span><span>select</span><span> </span><span>*</span><span> </span><span>from</span><span> uuids</span><span>;</span><span></span>
</p><p><span></span><span>-- +--------------------------------------+------------------------------------+</span><span></span>
</p><p><span></span><span>-- | UUIDAsChar                           | UUIDAsBinary                       |</span><span></span>
</p><p><span></span><span>-- +--------------------------------------+------------------------------------+</span><span></span>
</p><p><span></span><span>-- | d211ca18-d389-11ee-a506-0242ac120002 | 0xD211CA18D38911EEA5060242AC120002 |</span><span></span>
</p><p><span></span><span>-- +--------------------------------------+------------------------------------+</span>
</p></code></pre></div><h3 id="use-an-ordered-uuid-variant"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#use-an-ordered-uuid-variant">Use an ordered UUID variant</a></h3><p>Using a UUID version that supports ordering can mitigate some of the performance and storage impacts of using UUIDs by making the generated values more sequential which avoids some of the page splitting issues described earlier. Even when they are being generated on multiple systems, time-based UUIDs such as version 6 or 7 can guarantee uniqueness while keeping values as close to sequential as possible. The exception to this is UUIDv1, which has the least significant portion of the timestamp first.</p><h3 id="use-the-built-in-mysql-uuid-functions"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#use-the-built-in-mysql-uuid-functions">Use the built-in MySQL UUID functions</a></h3><p>MySQL supports generating UUIDs directly within SQL; however, it only supports UUIDv1 values. While it is not a great practice to use them by themselves, there is a helper function in MySQL called <code>uuid_to_bin</code>. Not only does this function convert the string value to binary, but you can use the option 'swap flag', which will reorder the timestamp portion to make the resulting binary more sequential.</p><div><pre><code><p><span>set</span><span> </span><span>@uuidvar</span><span> </span><span>=</span><span> </span><span>'d211ca18-d389-11ee-a506-0242ac120002'</span><span>;</span><span></span>
</p><p><span></span><span>-- Without swap flag</span><span></span>
</p><p><span></span><span>SELECT</span><span> HEX</span><span>(</span><span>UUID_TO_BIN</span><span>(</span><span>@uuidvar</span><span>)</span><span>)</span><span> </span><span>as</span><span> UUIDAsHex</span><span>;</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span><span></span>
</p><p><span></span><span>-- | UUIDAsHex                        |</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span><span></span>
</p><p><span></span><span>-- | D211CA18D38911EEA5060242AC120002 |</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span><span></span>
</p><p><span></span><span>-- With swap flag</span><span></span>
</p><p><span></span><span>SELECT</span><span> HEX</span><span>(</span><span>UUID_TO_BIN</span><span>(</span><span>@uuidvar</span><span>,</span><span>1</span><span>)</span><span>)</span><span> </span><span>as</span><span> UUIDAsHex</span><span>;</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span><span></span>
</p><p><span></span><span>-- | UUIDAsHex                        |</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span><span></span>
</p><p><span></span><span>-- | 11EED389D211CA18A5060242AC120002 |</span><span></span>
</p><p><span></span><span>-- +----------------------------------+</span>
</p></code></pre></div><h3 id="use-an-alternate-id-type"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#use-an-alternate-id-type">Use an alternate ID type</a></h3><p>UUIDs are not the only type of identifier that provides uniqueness within a distributed architecture. Considering they were first created in 1987, there has been plenty of time for other professionals to propose different formats such as Snowflake IDs, ULIDs, or even NanoIDs (<a target="_blank" href="https://planetscale.com/blog/why-we-chose-nanoids-for-planetscales-api">which we use at PlanetScale</a>).</p><div><pre><code><p><span># Snowflake ID</span>
</p><p><span>7167350074945572864</span>
</p><p><span># ULID</span>
</p><p><span>01HQF2QXSW5EFKRC2YYCEXZK0N</span>
</p><p><span># NanoID</span>
</p><p><span>kw2c0khavhql</span>
</p></code></pre></div><h2 id="conclusion"><a target="_blank" href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql#conclusion">Conclusion</a></h2><p>Using a UUID primary key in MySQL can (nearly) guarantee uniqueness in a distributed system; however, it comes with several tradeoffs. Luckily, with the many versions available and several alternatives, you have options that can better address some of these tradeoffs. After reading this article, you should be in a better position to make an informed decision about the ID type you choose when architecting your next database.</p></section>]]></content:encoded>
			</item>
			<item>
			<title>Remove automatic fetch &#x60;cache&#x60; instrumentation by acdlite · Pull Request #28896 · facebook&#x2F;react</title>
			<description>This removes the automatic patching of the global fetch function in Server Components environments to dedupe requests using React.cache, a behavior that some RSC framework maintainers have objected...</description>
			<link>https://github.com/facebook/react/pull/28896</link>
			<content:encoded><![CDATA[<div>
    <div>
      <p>This removes the automatic patching of the global <code>fetch</code> function in Server Components environments to dedupe requests using <code>React.cache</code>, a behavior that some RSC framework maintainers have objected to.</p>
<p>We may revisit this decision in the future, but for now it's not worth the controversy.</p>
<p>Frameworks that have already shipped this behavior, like Next.js, can reimplement it in userspace.</p>
<p>I considered keeping the implementation in the codebase and disabling it by setting <code>enableFetchInstrumentation</code> to <code>false</code> everywhere, but since that also disables the tests, it doesn't seem worth it because without test coverage the behavior is likely to drift regardless. We can just revert this PR later if desired.</p>
    </div>
</div>]]></content:encoded>
			</item>
			<item>
			<title>Functions: unstable_cache</title>
			<description>unstable_cache allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.import { getUser } from &#39;.&#x2F;data&#39;; import { unstable_cache } from...</description>
			<link>https://nextjs.org/docs/app/api-reference/functions/unstable_cache</link>
			<content:encoded><![CDATA[<p><code>unstable_cache</code> allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.</p><div><pre><code><span><span>import</span><span> { getUser } </span><span>from</span><span> </span><span>'./data'</span><span>;</span></span>
<span><span>import</span><span> { unstable_cache } </span><span>from</span><span> </span><span>'next/cache'</span><span>;</span></span>
<span> </span>
<span><span>const</span><span> </span><span>getCachedUser</span><span> </span><span>=</span><span> </span><span>unstable_cache</span><span>(</span></span>
<span><span>  </span><span>async</span><span> (id) </span><span>=&gt;</span><span> </span><span>getUser</span><span>(id)</span><span>,</span></span>
<span><span>  [</span><span>'my-app-user'</span><span>]</span></span>
<span><span>);</span></span>
<span> </span>
<span><span>export</span><span> </span><span>default</span><span> </span><span>async</span><span> </span><span>function</span><span> </span><span>Component</span><span>({ userID }) {</span></span>
<span><span>  </span><span>const</span><span> </span><span>user</span><span> </span><span>=</span><span> </span><span>await</span><span> </span><span>getCachedUser</span><span>(userID);</span></span>
<span><span>  </span><span>...</span></span>
<span><span>}</span></span></code></pre></div><div>
<p><strong>Warning</strong>: This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes.</p>
</div><p><code>unstable_cache</code> returns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned.</p>]]></content:encoded>
			</item>
			<item>
			<title>GitHub Copilot Workspace: Welcome to the Copilot-native developer environment</title>
			<description>Skip to content  		 		We’re redefining the developer environment with GitHub Copilot Workspace - where any developer can go from idea, to code, to software all in natural language....</description>
			<link>https://github.blog/2024-04-29-github-copilot-workspace/</link>
			<content:encoded><![CDATA[<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#start-of-content">
	Skip to content</a>
<div>
		<div>
		<p>We’re redefining the developer environment with GitHub Copilot Workspace - where any developer can go from idea, to code, to software all in natural language. </p>		</div>
					<div>
				<p><img src="https://github.blog/wp-content/uploads/2024/04/1200x630-Blog-Social-Primary.png?resize=1200%2C630" alt="GitHub Copilot Workspace: Welcome to the Copilot-native developer environment" />			</p></div>
				</div>
<section>
<div><p>We’re redefining the developer environment with GitHub Copilot Workspace–where any developer can go from idea, to code, to software in natural language. <a target="_blank" href="https://githubnext.com/projects/copilot-workspace">Sign up here</a>. </p></div>
<p>In the past two years, generative AI has foundationally changed the developer landscape largely as a tool embedded inside the developer environment. In 2022, we launched GitHub Copilot as an autocomplete pair programmer in the editor, <a target="_blank" href="https://github.blog/2022-09-07-research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/">boosting developer productivity by up to 55%</a>. Copilot is now the most widely adopted AI developer tool. In 2023, we released GitHub Copilot Chat—unlocking the power of natural language in coding, debugging, and testing—allowing developers to converse with their code in real time.</p>
<p>After sharing <a target="_blank" href="https://github.blog/2023-11-08-universe-2023-copilot-transforms-github-into-the-ai-powered-developer-platform/">an early glimpse</a> at GitHub Universe last year, today, we are reimagining the nature of the developer experience itself with the technical preview of GitHub Copilot Workspace: the Copilot-native developer environment. Within Copilot Workspace, developers can now brainstorm, plan, build, test, and run code in natural language. This new task-centric experience leverages different Copilot-powered agents from start to finish, while giving developers full control over every step of the process.</p>
<p>
			<iframe src="https://www.youtube.com/embed/pkotufZchjE?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
		</p>
<p>Copilot Workspace represents a radically new way of building software with natural language, and is expressly <a target="_blank" href="https://github.blog/2024-01-17-a-developers-second-brain-reducing-complexity-through-partnership-with-ai/">designed</a> to deliver–not replace–developer creativity, faster and easier than ever before. With Copilot Workspace we will empower more experienced developers to operate as systems thinkers, and materially lower the barrier of entry for who can build software.</p>
<p>Welcome to the first day of a new developer environment. Here’s how it works:</p>
<h3 id="it-all-starts-with-the-task">It all starts with the task…<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#it-all-starts-with-the-task"></a></h3>
<p><img src="https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=1024&amp;resize=1024%2C593" alt="It starts with a task. Open GitHub Copilot Workspace from a GitHub Issue, Pull Request, or Repository. (Screenshot of an issue in the octoacademy repository.)" srcset="https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=300 300w, https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=768 768w, https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=1024&amp;resize=1024%2C593 1024w, https://github.blog/wp-content/uploads/2024/04/octoacademy-projects.png?w=1536 1536w" /></p>
<p>For developers, the greatest barrier to entry is almost always at the <a target="_blank" href="https://github.blog/2023-11-08-universe-2023-copilot-transforms-github-into-the-ai-powered-developer-platform/">beginning</a>. Think of how often you hit a wall in the first steps of a big project, feature request, or even bug report, simply because you don’t know how to get started. GitHub Copilot Workspace meets developers right at the origin: a GitHub Repository or a GitHub Issue. By leveraging Copilot agents as a second brain, developers will have AI assistance from the very beginning of an idea.</p>
<h3 id="workspace-builds-the-full-plan">…Workspace builds the full plan<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#workspace-builds-the-full-plan"></a></h3>
<p><img src="https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=1024&amp;resize=1024%2C607" alt="Progress from your task to a specification, outlining what you want to achieve with Copilot Workspace. The steps are editable, enabling you to iterate on ideas." srcset="https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=3642 3642w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=300 300w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=768 768w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=1024&amp;resize=1024%2C607 1024w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=1536 1536w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=2048 2048w, https://github.blog/wp-content/uploads/2024/04/3-Plan-of-Action-Zoom-with-BG.png?w=3000 3000w" /></p>
<p>From there, Copilot Workspace offers a step-by-step plan to solve the issue based on its deep understanding of the codebase, issue replies, and more. It gives you everything you need to validate the plan, and test the code, in one streamlined list in natural language.</p>
<h3 id="and-its-entirely-editable">And it’s entirely editable…<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#and-its-entirely-editable"></a></h3>
<p><img src="https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=1024&amp;resize=1024%2C593" alt="Then adjust your plan of action, adding steps, and general notes. Once the plan is implemented, you can view changes with a PR diff view and make edits as needed." srcset="https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=300 300w, https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=768 768w, https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=1024&amp;resize=1024%2C593 1024w, https://github.blog/wp-content/uploads/2024/04/copilot-workspace.png?w=1536 1536w" /></p>
<p>Everything that GitHub Copilot Workspace proposes—from the plan to the code—is fully editable, allowing you to iterate until you’re confident in the path ahead. You retain all of the autonomy, while Copilot Workspace lifts your cognitive strain.</p>
<p><img src="https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=1024&amp;resize=1024%2C604" alt="Once you're happy with the code, you can use the integrated terminal to run unit tests, builds and appropriate checks." srcset="https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=3660 3660w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=300 300w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=768 768w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=1024&amp;resize=1024%2C604 1024w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=1536 1536w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=2048 2048w, https://github.blog/wp-content/uploads/2024/04/4.1-Run-code-in-Copilot-Workspace-v3.png?w=3000 3000w" /></p>
<p>And once you’re satisfied with the plan, you can run your code directly in Copilot Workspace, jump into the underlying GitHub Codespace, and tweak all code changes until you are happy with the final result. You can also instantly share a workspace with your team via a link, so they can view your work and even try out their own iterations.</p>
<p>All that’s left then is to file your pull request, run your GitHub Actions, security code scanning, and ask your team members for human code review. And best of all, they can leverage your Copilot Workspace to see how you got from idea to code.</p>
<p>
			<iframe src="https://www.youtube.com/embed/L5Xny6yehUg?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
		</p>
<h3 id="also-github-copilot-workspace-is-mobile-compatible">Also: GitHub Copilot Workspace is mobile compatible<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#also-github-copilot-workspace-is-mobile-compatible"></a></h3>
<p>And because ideas can happen anywhere, GitHub Copilot Workspace was designed to be used from any device—empowering a real-world development environment that can work on a desktop, laptop, or on the go.</p>
<p>
			<iframe src="https://www.youtube.com/embed/Zv6TuVzcRdY?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
		</p>
<p>This is our mark on the future of the development environment: an intuitive, Copilot-powered infrastructure that makes it easier to get started, to learn, and ultimately to execute.</p>
<h2 id="enabling-a-world-with-1b-developers">Enabling a world with 1B developers<a target="_blank" href="https://github.blog/2024-04-29-github-copilot-workspace/#enabling-a-world-with-1b-developers"></a></h2>
<p>Early last year, GitHub celebrated over <a target="_blank" href="https://github.blog/2023-01-25-100-million-developers-and-counting/">100 million developers</a> on our platform—and counting. As programming in natural language lowers the barrier of entry to who can build software, we are accelerating to a near future where <a target="_blank" href="https://www.sequoiacap.com/article/the-next-billion-developers-perspective/">one billion people</a> on GitHub will control a machine just as easily as they ride a bicycle. We’ve constructed GitHub Copilot Workspace in pursuit of this horizon, as a conduit to help extend the economic opportunity and joy of building software to every human on the planet.</p>
<p>At the same time, we live in a world dependent on—and in short supply of—professional developers. Around the world, developers add millions of lines of code every single day to evermore complex systems and are increasingly behind on maintaining the old ones. Just like any infrastructure in this world, we need real experts to maintain and renew the world’s code. By quantifiably reducing boilerplate work, we will empower professional developers to increasingly operate as systems thinkers. We believe the step change in productivity gains that professional developers will experience by virtue of Copilot and now Copilot Workspace will only continue to <a target="_blank" href="https://github.blog/2023-06-27-the-economic-impact-of-the-ai-powered-developer-lifecycle-and-lessons-from-github-copilot/">increase labor demand</a>.</p>
<p>That’s the dual potential of GitHub Copilot: for the professional and hobbyist developer alike, channeling creativity into code just got a whole lot easier.</p>
<p><strong>Today, we begin the technical preview for GitHub Copilot Workspace.</strong><br /> <a target="_blank" href="https://githubnext.com/projects/copilot-workspace">Sign up now</a>. <br /> We can’t wait to see what you will build from here.</p>
  </section>
  <section>
    <h2>
      Explore more from GitHub    </h2>
    <div>
      <div>
          <p><img src="https://github.blog/wp-content/uploads/2022/05/product.svg" alt="Product" /></p><h3>Product</h3>
    <p><span>Updates on GitHub products and features, hot off the press.</span>    </p>
          <p>
        <a target="_blank" href="https://github.blog/category/product/">
          Learn more<svg width="16" height="16"></svg>
                  </a>
      </p>
      </div>
<div>
          <p><img src="https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg" alt="GitHub Universe 2024" /></p><h3>GitHub Universe 2024</h3>
    <p>
      Get tickets to the 10th anniversary of our global developer event on AI, DevEx, and security.    </p>
          <p>
        <a href="https://githubuniverse.com/?utm_source=Blog&amp;utm_medium=GitHub&amp;utm_campaign=blog-module" target="_blank">
          Get tickets<svg width="16" height="16"></svg>
                  </a>
      </p>
      </div>
<div>
          <p><img src="https://github.blog/wp-content/uploads/2022/05/Copilot_Blog_Icon-1.svg" alt="GitHub Copilot" /></p><h3>GitHub Copilot</h3>
    <p>
      Don't fly solo. Try 30 days for free.    </p>
          <p>
        <a href="https://github.com/features/copilot?utm_source=blog&amp;utm_medium=bottomnav&amp;utm_campaign=cta&amp;utm_content=copilot" target="_blank">
          Learn more<svg width="16" height="16"></svg>
                  </a>
      </p>
      </div>
<div>
          <p><img src="https://github.blog/wp-content/uploads/2022/05/careers.svg" alt="Work at GitHub!" /></p><h3>Work at GitHub!</h3>
    <p><span>Check out our current job openings.</span>    </p>
          <p>
        <a href="https://github.com/about/careers" target="_blank">
          Learn more<svg width="16" height="16"></svg>
                  </a>
      </p>
      </div>
    </div>
  </section>
<div>
          <h2> Subscribe to our newsletter</h2>
          <p>Code with confidence. Discover tips, technical guides, and best practices in our biweekly newsletter just for devs.</p>
        </div>]]></content:encoded>
			</item>
			<item>
			<title>Supermaven: Free AI Code Completion</title>
			<description>interface PostMetadata {    title: string;    description: string;    author: string;    date: Date; }Supermaven finds this definition from elsewhere in the codebase and uses it to provide the right...</description>
			<link>https://supermaven.com/</link>
			<content:encoded><![CDATA[<div><div><div><p><img alt="Line" src="https://supermaven.com/_next/static/media/line-1.c4ba18ce.svg" /></p><div><pre>interface PostMetadata {
    title: string;
    description: string;
    author: string;
    date: Date;
}</pre><div><p><img alt="Information icon" src="https://supermaven.com/_next/static/media/info.babd68dd.svg" /></p><p>Supermaven finds this definition from elsewhere in the codebase and uses it to provide the right suggestions.</p></div></div><p><img alt="Line" src="https://supermaven.com/_next/static/media/line-2.c8bcf7c7.svg" /></p><div><p>Write functions in seconds, not minutes.</p><pre><span>f</span><span>u</span><span>n</span><span></span><span>c</span><span>t</span><span>i</span><span>o</span><span>n</span><span> </span><span>p</span><span>a</span><span>r</span><span>s</span><span>e</span><span>P</span><span>o</span><span>st</span><span>Meta</span><span>data</span><span>(lines</span><span>: string[]</span><span>): Post</span><span>Metadata</span><span>[] {</span><span>
    const result: PostMetadata[] = [];</span><span>
    for (let line of lines) {</span><span>
        const obj = JSON.parse(line);</span><span>
        if (obj.type !== "metadata") {</span><span>
            continue;</span><span>
        }</span><span>
        result.push({</span><span>
            title: obj.title,</span><span>
            description: obj.description,</span><span>
            author: obj.author,</span><span>
            date: new Date(obj.date),</span><span>
        });</span><span>
    }</span><span>
    return result;</span><span>
}</span></pre></div></div><div><div><pre>ALTER TABLE users
ADD COLUMN last_active
TIMESTAMPTZ;</pre><div><p><img alt="Information icon" src="https://supermaven.com/_next/static/media/info.babd68dd.svg" /></p><p>Supermaven uses its context window to scan all files in the codebase and finds this code in a migration, so it suggests a query using the <code>last_active</code> column.</p></div></div><p><img alt="Line" src="https://supermaven.com/_next/static/media/line-3.4463b533.svg" /></p><div><p>The only AI assistant that sees all your code.</p><p>Supermaven has a 300,000 token context window, longer than any other product on the market.</p><pre><span>def get_users_active_in_last_week(conn):</span><span>
    </span><span></span><span>c</span><span>u</span><span>r</span><span> = </span><span>conn</span><span>.cursor</span><span>()</span><span>
    </span><span>query</span><span> = </span><span>"""</span><span>
        SELECT</span><span> user</span><span>_id</span><span> FROM</span><span> users</span><span>
        WHERE</span><span> last</span><span>_active</span><span> &gt; </span><span>now()</span><span> - </span><span>interval</span><span> '1 </span><span>week</span><span>'</span><span>
    """</span><span>
    cur.execute(query)</span><span>
    return cur.fetchall()</span></pre></div></div></div><div><div><div><p>Write functions in seconds, not minutes.</p><pre><span>f</span><span>u</span><span>n</span><span></span><span>c</span><span>t</span><span>i</span><span>o</span><span>n</span><span> </span><span>p</span><span>a</span><span>r</span><span>s</span><span>e</span><span>P</span><span>o</span><span>st</span><span>Meta</span><span>data</span><span>(lines</span><span>: string[]</span><span>): Post</span><span>Metadata</span><span>[] {</span><span>
    const result: PostMetadata[] = [];</span><span>
    for (let line of lines) {</span><span>
        const obj = JSON.parse(line);</span><span>
        if (obj.type !== "metadata") {</span><span>
            continue;</span><span>
        }</span><span>
        result.push({</span><span>
            title: obj.title,</span><span>
            description: obj.description,</span><span>
            author: obj.author,</span><span>
            date: new Date(obj.date),</span><span>
        });</span><span>
    }</span><span>
    return result;</span><span>
}</span></pre></div><div><pre>interface PostMetadata {
    title: string;
    description: string;
    author: string;
    date: Date;
}</pre><div><p><img alt="Information icon" src="https://supermaven.com/_next/static/media/info.babd68dd.svg" /></p><p>Supermaven finds this definition from elsewhere in the codebase and uses it to provide the right suggestions.</p></div></div></div><div><div><p>The only AI assistant that sees all your code.</p><p>Supermaven has a 300,000 token context window, longer than any other product on the market.</p><pre><span>def get_users_active_in_last_week(conn):</span><span>
    </span><span></span><span>c</span><span>u</span><span>r</span><span> = </span><span>conn</span><span>.cursor</span><span>()</span><span>
    </span><span>query</span><span> = </span><span>"""</span><span>
        SELECT</span><span> user</span><span>_id</span><span> FROM</span><span> users</span><span>
        WHERE</span><span> last</span><span>_active</span><span> &gt; </span><span>now()</span><span> - </span><span>interval</span><span> '1 </span><span>week</span><span>'</span><span>
    """</span><span>
    cur.execute(query)</span><span>
    return cur.fetchall()</span></pre></div><div><pre>ALTER TABLE users
ADD COLUMN last_active
TIMESTAMPTZ;</pre><div><p><img alt="Information icon" src="https://supermaven.com/_next/static/media/info.babd68dd.svg" /></p><p>Supermaven uses its context window to scan all files in the codebase and finds this code in a migration, so it suggests a query using the <code>last_active</code> column.</p></div></div></div></div><div><h4>Designed for speed.</h4><p>See a real-time demo of Supermaven being used:</p></div><div><h3>Free Tier</h3><ul><li><span>Fast, high-quality code suggestions</span></li><li><span>Works with large codebases</span></li><li><span><span>7-day data retention limit (<a target="_blank" href="https://supermaven.com/code-policy">details</a>)</span></span></li><li><span>Adapts to your coding style</span><span> (Pro only)</span></li><li><span>300,000-token context window</span><span> (Pro only)</span></li><li><span>Largest, most intelligent model</span><span> (Pro only)</span></li></ul></div><a target="_blank" href="https://supermaven.com/"><img alt="Supermaven logo" src="https://supermaven.com/_next/static/media/white-logo-text.5e0e8728.svg" /></a><a target="_blank" href="https://supermaven.com/pricing"><p>Pricing</p></a><a target="_blank" href="https://supermaven.com/about"><p>About</p></a><a target="_blank" href="https://supermaven.com/blog"><p>Blog</p></a><a target="_blank" href="https://supermaven.com/login"><p>Login</p></a><a target="_blank" href="https://supermaven.com/download"></a></div>]]></content:encoded>
			</item>
			<item>
			<title>Turborepo Rewrite - The Right Choice?</title>
			<description>March 4, 2024 (2mo ago)A balancing act There&#39;s been a lot of talk about “hype-driven development” lately, often targeting the decision to “just rewrite it in Rust.” A lot of the criticism about these kinds of...</description>
			<link>https://ielm.io/blog/turbo</link>
			<content:encoded><![CDATA[<section><p>March 4, 2024 (2mo ago)</p><article><h2 id="a-balancing-act"><a target="_blank" href="https://ielm.io/blog/turbo#a-balancing-act"></a>A balancing act</h2>
<p>There's been a lot of talk about “hype-driven development” lately, often
targeting the decision to “just rewrite it in Rust.” A lot of the criticism
about these kinds of decisions comes down to a pretty simple comparison:
iteration speed vs. quality and maintainability¹. These counterpoints are often
intertwined, and the decision to choose a language is a highly nuanced one
that takes into account tradeoffs that people external to the development team
may not have access to. While the idea that the feature set - along with the
speed to market - of a product is often more important than the internal
developer experience or long-term maintainability of a code-base is a tempting
proposition, it's often not truly the case.</p>
<p><a target="_blank" href="https://x.com/t3dotgg"><u>Theo</u></a> recently <a target="_blank" href="https://youtu.be/_SzvJJ3_6M0?si=bPdoU5QuftIWXqVG"><u>released a
video</u></a> about the <a target="_blank" href="https://vercel.com/blog/how-turborepo-is-porting-from-go-to-rust"><u>Turborepo
rewrite</u></a>
from GoLang to Rust. In that video, he mentioned that the rewrite was <em>not a
great</em> idea because in the first 4 months of the Turbo project, it had the
same - if not better - functionality that it does now after spending 15+ months
transitioning to Rust. His point is that it's often better to iterate quickly
on a product rather than spending time improving the internal codebase and
rewriting a product “for minimal improvement in speed or efficiency.”
(Not verbatim.)</p>
<p><i><strong>He has a point.</strong></i> There's a lot of history and evidence to back this up.
The engineering culture for product at companies like Meta and Google hold
strongly to that belief, and many engineers agree with that sentiment. “The Lean
Startup” by Eric Ries praises the idea, saying that it's better to get early
feedback on a product and iterate quickly rather than optimizing for a future
that may not exist when you get there. YCombinator's Startup School also
re-iterates that idea in several of their videos and articles. These are all
fair points, and make a lot of sense when you consider where they're coming
from.</p>
<h2 id="so-if-i-agree-why-am-i-even-writing-this"><a target="_blank" href="https://ielm.io/blog/turbo#so-if-i-agree-why-am-i-even-writing-this"></a>So, if I agree, why am I even writing this?</h2>
<p>Because it's not always that simple. For certain products, like many web and
mobile applications, this makes a lot of sense, and is often the right approach.
But when you consider the set of requirements that a project like Turborepo has,
other considerations come into focus.</p>
<p>Turbo is an infrastructure tool - according to their website “Turbo is an
incremental bundler and build system optimized for JavaScript and TypeScript,
written in Rust.” Planning the development of infrastructure tools often has
to consider many different conflicting requirements. Much like making the
impossible decision between availability and consistency when designing
distributed systems, infrastructure tools must make an impossible decision among
requirements for feature iteration, API consistency, avoidance of undefined
behaviors, cross-platform stability, and much, much more. Often, a balance can
be struck in complex software systems that nicely solves for most of the
requirements. But sometimes, concessions must be made and something has to give.
In the case of Turborepo, that something was building a more maintainable system
at the expense of development time, adding new features, and the quick
availability of the tool.</p>
<p>I want to be clear: I'm not trying to say that every project needs to follow
suit, nor am I saying that Rust is the best language for every project. If
you're building a full stack PWA, and need fine-grained reactivity, you might
want to use React and Typescript where the backend and frontend are tightly
coupled (shoutout <a target="_blank" href="https://create.t3.gg/"><u>T3</u></a>). It's maybe not the place
for a language like Rust, or Zig, or Go. But if you're building a tool that's
going to be used on many hundreds of thousands (millions?) of machines, across
many projects, where a developer might not have the latest version (because
let's be real, we all forget to update sometimes), stability is extremely
important. Breaking API changes cost a lot of money, time, frustration, and can
lead to massive churn. So, often, after an architectural decision has been made,
even if it's found to be substandard, projects need to stay the course.</p>
<p>We've seen this in so many cases. For example, in the case of Rust's async
model, even after all the time spent on it, there are architectural changes that
could have been made that would have prevented a lot of headaches. According to
<a target="_blank" href="https://without.boats/blog/why-async-rust/"><u>Boats</u></a> “<em>the intention was
that users writing “normal async Rust” would never have to deal with the <code>Pin</code>
type at all, but there have been notable exceptions. Almost all of these would
be fixable with some syntax improvements. One such exception that's really bad
is that you need to pin a future trait object to await it. This was an unforced
error that would now be a breaking change to fix.</em>"</p>
<h2 id="rust-btw"><a target="_blank" href="https://ielm.io/blog/turbo#rust-btw"></a>Rust, btw</h2>
<p>Full disclosure: I am a Rust developer who's been using the language in
production systems for several years. But even though Rust is my language of
choice, my company is built on a NextJS and Typescript stack, with only some
critical components written in Rust. Why? Because like I mentioned at the top of
this article, iteration speed <em>does</em> matter, and in our case, given our
requirements, we needed early feedback and short iteration cycles.</p>
<p>The interesting thing about the Turborepo case is that even though Go was a
<em>sufficiently</em> powerful language, the expressiveness of Rust enabled the team to
model the required behavior in a much more maintainable and consistent manner.
One of the (albeit simple) examples they mentioned in their <a target="_blank" href="https://vercel.com/blog/finishing-turborepos-migration-from-go-to-rust"><u>blog
post</u></a>
is the model of the package graph.²</p>
<p>In the Go implementation, package names and the workspace root were stored as
strings. The workspace root was designated a “magic string” <code>//</code>, and all
subdirectories were modeled in relation to that magic string.</p>
<p>In the Rust implementation, package names and the workspace root are modeled as
an enum. Rust's <code>Enum</code> type provides a powerful pattern matching mechanism that
allowed them to define separate variants for the workspace root and for
subdirectories:</p>
<pre><code>enum PackageName {
  Root,
  Other(String)
}
</code></pre>
<p>As they go on to say, “not only is this more efficient, it also ensures
correctness.” Rust's <code>Enum</code> types greatly facilitate maintainability, and
modeling this sort of thing super easy to read and understand. I believe that
for Turborepo, efficiency and correctness are some of the more important
requirements.</p>
<p>There are other considerations that I don't want to go into in fear of an
overly-long post, but are detailed below:</p>
<ul>
<li>FFI with languages like Go can be pretty difficult. Go's concurrency model and
green threads make concurrency “simple” when working within the language, but
are harder to manage across inter-language communication. This is by design -
you can call C from Go, but it's much harder to call Go from C.</li>
<li>The abstraction layers that Go provides over system calls are convenient, but
for a bundler and build system like Turbo, low-level control over things like
the threading model and other system functions is important. (And not to Rust
all over you, but <code>cfg</code> attributes make platform-dependent compilation much more
maintainable and the code separation much more understandable.)</li>
<li>Garbage collection is a wonderful, sneaky double-edged sword. Go occupies a
space where avoiding the GC is a bit convoluted, requiring manual minimization
of heap allocations.</li>
<li>Enough yapping about Go - what about Zig? Well, although Bun is written in Zig
(and doing phenomenally might I add), Zig <i><strong>is</strong></i> at v0.11.³ Bun is making
a juggernaut bet on the stability of the API and the progress of the language.
Zig v0.12 introduces many breaking changes, including overhauls of the std
library. Zig's async features have also regressed - they are not present in
v0.11, and likely will not be present in v0.12 either. I love Zig, it's one
of my favorite languages, but it's nevertheless a risk.⁴</li>
</ul>
<h2 id="conclusion"><a target="_blank" href="https://ielm.io/blog/turbo#conclusion"></a>Conclusion</h2>
<p>The point I'm trying to make in this long-winded post is this: in some cases -
and I think the Turbo example is one of them - error avoidance and explicit
behavior modeling are <strong>the</strong> driving factor behind architectural or language
decisions.</p>
<p>Another tangential, semi-unrelated, but still important point here is that
language choice has an effect on developer experience when working on a project.
Rust is fun to write, and working in a language you enjoy makes a project more
rewarding to work on. And let's be real, hype-driven development is a very real
thing. The “rewritten in Rust” phenomenon is funny on Twitter/X, but it's also
a valid marketing strategy.</p>
<p>The main idea I want to leave you with is that choice of language, tools,
architecture, etc., is a highly nuanced topic, and I don't think there's really
a perfectly right answer. Engineering teams need to carefully assess
requirements and make decisions according to the project's needs and long-term
viability. No one can prescribe when and where to use any language; every
software system is different and comes with it's own unique set of challenges.
But that's part of the fun of it all.</p>
<hr />
<p>¹ This is a bit of an unfair point, because this isn't an argument against
quality, and often iterations on features are what actually improve long term
quality for end-users. But speed does sometimes come at the cost of quality, and
hastily made decisions can actually hurt you down the line.</p>
<p>² There are other examples from the Turbo blog post that showcase where Rust
shines in comparison to Go, but the directory model shows this most clearly in
my opinion.</p>
<p>³ Zig v0.12 is coming soon!!! <img alt="Zig v0.12!" srcset="/_next/image?url=%2Fimages%2Fzig-v0.12.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2Fimages%2Fzig-v0.12.png&amp;w=3840&amp;q=75 2x" src="https://ielm.io/_next/image?url=%2Fimages%2Fzig-v0.12.png&amp;w=3840&amp;q=75" /></p>
<p>⁴ My unsolicited opinion is that Zig is probably an excellent bet, given that
it's is a 501(c)(3) and Andrew Kelley and the Zig team are incredible engineers.
This might have been a great choice for Turbo as well. We'd have to ask Jared
Sumner and the Bun team what their decision and thought process was.</p></article></section>]]></content:encoded>
			</item>
			<item>
			<title>The Ultimate Ideal Bestest Base Font Size That Everyone Is Keeping a Secret, Especially Chet</title>
			<description>It’s none. Clarification Let me clarify: don’t set a base font size. body { &#x2F;* font-size: yeah, no *&#x2F; } Got a linter or code checker or boss-man hassling you that you need to set something? Ok, use something like this: html { font-size: 100%; } Because This approach has…</description>
			<link>https://adrianroselli.com/2024/03/the-ultimate-ideal-bestest-base-font-size-that-everyone-is-keeping-a-secret-especially-chet.html</link>
			<content:encoded><![CDATA[<div>
        <p>
It’s none.
</p>
<h2 id="Clarification">Clarification</h2>
<p>
Let me clarify: don’t set a base font size.
</p>
<pre><code>body {
  /* font-size: yeah, no */
}</code></pre>
<p>
Got a linter or code checker or boss-man hassling you that you need to set <em>something</em>? Ok, use <a target="_blank" href="https://mastodon.social/@mikemai2awesome/112094222983362704">something like</a> this:
</p>
<pre><code>html {
  font-size: 100%;
}</code></pre>
<h2 id="Because">Because</h2>
<img src="https://adrianroselli.com/wp-content/uploads/2024/03/Firefox-settings-fonts-advanced.png" alt="Firefox advanced font settings dialog with the size set to 36, minimum to 24, serif font as Georgia, sans-serif as Atkinson Hyperlegible, but still allowing pages to override the fonts." />
<p>
This approach has the advantage of always inheriting the user’s preferred font size. The one they choose in their browser or on their system. Even if they did not explicitly choose one (because the default was maybe good enough). 
</p>
<p>
All other font sizes (headings, navigation, footer, etc.) should then use relative units. Ideally without being <em>smaller</em> than the default size (with very specific exceptions).
</p>
<p>
Because you avoid <a target="_blank" href="https://stackoverflow.com/questions/58421314/what-does-font-size-62-5-do">calculation witchcraft</a>, any smaller sizes could be easier for authors to spot — <code>.9rem</code> and <code>90%</code> are clearly smaller.
</p>
<p>
Alternatively, font sizes based on viewport units bring risk, not least of which is <a target="_blank" href="https://adrianroselli.com/2019/12/responsive-type-and-zoom.html">preventing the user from scaling</a> it large enough to read. Then you need yet more <a target="_blank" href="https://www.smashingmagazine.com/2023/11/addressing-accessibility-concerns-fluid-type/">calculation sorcery</a> to prevent it.
</p>
<h2 id="Forms">Forms</h2>
<p>
While you’re tearing out an unnecessary base font size declaration, maybe <em>add</em> this to your CSS to honor the user’s preferences in forms as well:
</p>
<pre><code>select, textarea, input, button {
  font: inherit;
}</code></pre>
<p>
I explain this in more detail in my posts <a target="_blank" href="https://adrianroselli.com/2019/09/under-engineered-text-boxen.html">Under-Engineered Text Boxen</a> and <a target="_blank" href="https://adrianroselli.com/2021/03/under-engineered-select-menus.html">Under-Engineered Select Menus</a>.
</p>
<h2 id="Print">Print</h2>
<p>
When it comes to print styles, the text may be too large for your audience (regardless of if or how you set it). If so, you can set the base font in the appropriate <em>point</em> size and all your other relative font sizes will work from that.
</p>
<pre><code>@media print {
  body {
    font-size: 8pt;
  }
}</code></pre>
<h2 id="Recap">Recap</h2>
<p>
That’s it. That’s the secret. Don’t set a base font size.
</p>
<h2 id="But">But…</h2>
<p>
Sure, <em>your</em> case is special. <em>Your</em> case is more important than respecting user choice. I’m not your dad. I can’t stop you. Legally.
</p>
<h2 id="Update01">Update: 3 April 2024</h2>
<p>
With Mike Mai’s feedback (linked above) and <a target="_blank" href="https://adrianroselli.com/2024/03/the-ultimate-ideal-bestest-base-font-size-that-everyone-is-keeping-a-secret-especially-chet.html#comment-285002">Scott Kellum’s comments</a> below, I amended the example for when you <em>have to</em> but some style in there. Now it uses <code>html</code> as the selector instead of  <code>body</code>.
</p>
<p>
While this post is about <em>not</em> setting anything, I made the mistake of including something if you were forced to. Folks fixated on that, so that’s on me.
</p>
<h2 id="Update02">Update: 22 April 2024</h2>
<p>
Mike Mai wrote <a target="_blank" href="https://mikemai.net/blog/2024/03/25/the-case-for-defining-base-font-size.html">The Case for Defining Base Font-size</a>. His argument is that a typeface can warrant setting a base font size. I don’t necessarily disagree. You are imposing a font on users that is potentially too small (or too large), so if you imposed one decision, stacking another is not a stretch.
</p>
<p>
This assumes the user can download the font (it’s not blocked or interrupted) and the user is ok with the font (and hasn’t blocked it via preferences).
</p>
<h2 id="Update03">Update: 1 May 2024</h2>
<p>
My 300 word throwaway post got featured in a video, which I found out about via Spencer Wohlerson the A11y Slack. Also, I had that shirt.
</p>
<iframe allow="autoplay"></iframe>
</div>]]></content:encoded>
			</item>
			<item>
			<title>The search for easier safe systems programming</title>
			<description>I&#39;ve been involved in the Rust project in some form or another since 2016, and it&#39;s a language I&#39;m very comfortable using. Many Rust programmers could say the same. But, if we take a step back and are honest...</description>
			<link>https://www.sophiajt.com/search-for-easier-safe-systems-programming/</link>
			<content:encoded><![CDATA[<div>
    <p>I've been involved in the Rust project in some form or another since 2016, and it's a language I'm very comfortable using. Many Rust programmers could <a target="_blank" href="https://blog.rust-lang.org/2024/02/19/2023-Rust-Annual-Survey-2023-results.html">say the same</a>. But, if we take a step back and are honest with ourselves, we'd admit that the road to getting to that level of comfort was difficult.</p>
<p>I taught Rust professionally for two years. Watching the faces of people trying to learn Rust for the first time reminded me just how hard this language is to learn.</p>
<p>After two years of that, I wanted to answer a question I wasn't entirely sure had an answer: <em>Is it possible to make an easy-to-use, easy-to-learn, and easy-to-teach safe systems language?</em> Could I put my career working on programming languages (TypeScript, Rust, Nushell, etc) to use and find a solution?</p>
<h2 id="enter-june">Enter June</h2>
<p>For the last year and a half, I and my recently-added collaborator Jane Losare-Lusby have been working in secret on a safe systems language that could be learned about as quickly as one can learn Go. I think we might have something worth exploring.</p>
<h2 id="changing-how-we-think-of-memory">Changing how we think of memory</h2>
<p>In Rust, we think of each piece of memory as having its own lifetime. Each of these lifetimes must be tracked, sometimes leading to rather complex code, complex error messages, and/or complex mental models of what is happening. The complexity of course comes with the benefit of being highly precise about each and every piece of memory and its reclamation.</p>
<p>Using a Rust example:</p>
<pre>
<code><span>struct </span><span>Node {
    </span><span>data1</span><span>: &amp;Data,
    </span><span>data2</span><span>: &amp;Data,
    </span><span>data3</span><span>: &amp;Data,
}
</span></code></pre>
<p>Rust developers will spot right away that this is an incomplete example. We need two more things: Lifetime Parameters and Lifetime Annotations. Adding those, we get:</p>
<pre>
<code><span>struct </span><span>Node&lt;</span><span>'a</span><span>, </span><span>'b</span><span>, </span><span>'c</span><span>&gt; {
    </span><span>data1</span><span>: &amp;</span><span>'a</span><span> Data,
    </span><span>data2</span><span>: &amp;</span><span>'b</span><span> Data,
    </span><span>data3</span><span>: &amp;</span><span>'c</span><span> Data,
}
</span></code></pre>
<p>The concept count for this example ends up being pretty substantial. Counting them off, we get:</p>
<ul>
<li>Lifetimes</li>
<li>Lifetime annotations</li>
<li>Lifetime parameters</li>
<li>Ownership and borrowing</li>
<li>Generics</li>
</ul>
<p>When I showed examples like this to my class when I taught Rust, I had to walk them through each of those concepts first before I could show the full example.</p>
<p>The question then is: can we make this easier?</p>
<h2 id="what-if-memory-was-grouped">What if memory was grouped?</h2>
<p>What if instead of having to track every piece of memory's lifetime separately, we let groups of related allocations share a lifetime?</p>
<p>Effectively, this would mean that a data structure, like a linked list, would have a pointer pointing to the head which has a lifetime, and then every node in the list you can reach from that head has the same lifetime.</p>
<p>There are some benefits to this approach, as well as a few drawbacks. Let's take a look at the benefits first.</p>
<h2 id="benefits-of-grouped-allocations">Benefits of grouped allocations</h2>
<p>Exploring grouped allocations, we noticed some immediate benefits. The first is that we could treat all user-defined values as pointers, and these pointers could also represent their own lifetimes (without needing lifetime parameters). This makes the code feel quite a bit lighter:</p>
<pre>
<code><span>struct </span><span>Node {
    </span><span>data</span><span>: </span><span>i64</span><span>
    next: Node?
}
</span><span>let</span><span> n = new Node(data: </span><span>123</span><span>, next: none)
</span></code></pre>
<p>Since all user data is pointers, we can use the name of the type to mean "pointer to this structured data".</p>
<p>The next thing we noticed is that both lifetimes and inference for lifetimes becomes significantly simpler.</p>
<p>Let's take a variation of the example above:</p>
<pre>
<code><span>struct </span><span>Node {
    </span><span>data</span><span>: </span><span>i64</span><span>
    next: Node?
}
fun </span><span>do_this</span><span>() {
    </span><span>let</span><span> n = new Node(data: </span><span>123</span><span>, next: none)
}
</span></code></pre>
<p>We can infer that the allocation that creates <code>new Node(...)</code> has a lifetime and what it is. Because this allocation never "escapes" the function - that is, it never leaves the function in any way - then we can call its lifetime "Local".</p>
<p>As we'll find out, each of the lifetime possibities is a readable name that we can show the user in error messages. It also makes things significantly easier to teach.</p>
<p>Let's look at another example to see a different lifetime.</p>
<pre>
<code><span>struct </span><span>Stats {
    </span><span>age</span><span>: </span><span>i64
</span><span>}
</span><span>struct </span><span>Employee {
    </span><span>name</span><span>: c_string,
    </span><span>stats</span><span>: Stats,
}
fun </span><span>set_stats</span><span>(</span><span>mut</span><span> employee: Employee) {
    employee.stats = new Stats(age: </span><span>33</span><span>)
}
fun </span><span>main</span><span>() {
    </span><span>mut</span><span> employee = new Employee(name: c"</span><span>Soph</span><span>", stats: new Stats(age: </span><span>22</span><span>))
    </span><span>set_stats</span><span>(employee)
    </span><span>println</span><span>(employee.stats.age)
}
</span></code></pre>
<p>A bit of a longer example this time, but let's focus on this function:</p>
<pre>
<code><span>fun </span><span>set_stats</span><span>(</span><span>mut</span><span> employee: Employee) {
    employee.stats = new Stats(age: </span><span>33</span><span>)
}
</span></code></pre>
<p>What's the lifetime of this <code>new Stats(..)</code> allocation? In this example, we do see the new pointer escape the function via a parameter. We can also give this a readable lifetime: <code>Param(employee)</code></p>
<p>In all, we have three lifetimes an allocation can have:</p>
<ul>
<li>Local</li>
<li>Param(xxxx)</li>
<li>Return</li>
</ul>
<h2 id="any-data-structure-you-want">Any data structure you want</h2>
<p>Another big advantage of grouping our allocations is that we no longer have to worry about a drop order. This means we can think of the whole thing as dropping all at once. For large structures, that can be a speed-up over languages with a required drop order.</p>
<p>Additionally, we get another major benefit. We can now create arbitrary data structures.</p>
<pre>
<code><span>struct </span><span>Node {
    </span><span>data</span><span>: </span><span>i64</span><span>
    next: Node?
}
</span><span>mut</span><span> node3 = new Node(data: </span><span>3</span><span>, next: none)
</span><span>let</span><span> node2 = new Node(data: </span><span>2</span><span>, next: node3)
</span><span>let</span><span> node1 = new Node(data: </span><span>1</span><span>, next: node2)
node3.next = node1
</span></code></pre>
<p>And just like that, we've made a circular linked list. Creating a similar example in Rust is certainly more of a challenge.</p>
<p>But, something fishy is going on here.</p>
<p>To make the above work, we're using shared, mutable pointers. This is explicitly forbidden in Rust. Why is it okay here?</p>
<p>Rust disallows holding two mutable references to the same memory location and for good reason. Well, multiple reasons actually.</p>
<p>First, having two copies of a mutable pointer where two separate threads each hold a copy means we have the possibility for a race condition. This can leave us with incoherent data that's difficult to debug.</p>
<p>Second, even if these two multiple pointers are limited to the same thread, we get what we might call "spooky action at a distance". The modification of one pointer is then visible to the holder of the other pointer, which might be far away from the source of the mutation.</p>
<p>For us to reasonably use shared, mutable pointers, we need to tame both of these. The first issue, the race condition, is easy enough: we prevent sending shared, mutable pointers between threads. This limits them to a single thread.</p>
<p>The second issue is decidedly harder. There have been many attempts at ways of handling this through rules enforced by the type system.</p>
<p>In June, we're trying something a bit different. We'll let developers use shared, mutable pointers, but then offer a "carrot" to opt-in to restrictions around using them. The carrot ends up pulling from a classic technique of software engineering: encapsulation.</p>
<h2 id="the-full-power-of-encapsulation">The full power of encapsulation</h2>
<p>In traditional encapsulation, programmers make a kind of "best effort" to hide implementation details from the world around them. Keeping private state private grants the benefits of better code reuse, ease of updating implementation details, and more.</p>
<p>But as often is the case, if that kind of rule isn't enforced, over time APIs get designed where internal implementation details leak out.</p>
<p>Something very interesting happens if we don't allow this to happen. If an encapsulation can be checked by the compiler, and the compiler enforces that no private details leak, we have what you might call "full encapsulation".</p>
<p>These kinds of encapsulations wouldn't allow any aliasing of pointers into them. They'd have their internal pointers fully isolated from the rest of the program.</p>
<p>Once we have this, some new capabilities start opening up:</p>
<ul>
<li>We can "fence off" our shared, mutable pointers, making it possible to create single-owner encapsulations that can be sent safely between threads.</li>
<li>We can lean people in the direction of cleaner API design, as now we have a way to truly keep private implementation details private.</li>
<li>We can handle some of the drawbacks of grouped allocations.</li>
</ul>
<p>What kind of drawbacks, you might ask? It's high time we talked about them.</p>
<h2 id="drawbacks-of-grouped-allocations">Drawbacks of grouped allocations</h2>
<p>If we go back to our earlier example and look carefully, we'll notice something:</p>
<pre>
<code><span>fun </span><span>set_stats</span><span>(</span><span>mut</span><span> employee: Employee) {
    employee.stats = new Stats(age: </span><span>33</span><span>)
}
fun </span><span>main</span><span>() {
    </span><span>mut</span><span> employee = new Employee(name: c"</span><span>Soph</span><span>", stats: new Stats(age: </span><span>22</span><span>))
    </span><span>set_stats</span><span>(employee)
    </span><span>println</span><span>(employee.stats.age)
}
</span></code></pre>
<p>The question is: what happened to the <code>new Stats(age: 22)</code> allocation?</p>
<p>Remembering that June is a systems language, we can't say "the garbage collector handled it" because we have no garbage collector. Nor can we say "the refcount hit zero, so we reclaimed it" as we don't use refcounting. As a systems language, we can't allow hidden or difficult-to-predict overhead to happen.</p>
<p>It's not actually leaked either, as even the memory it occupies will be reclaimed once the entire group is reclaimed. For all intents and purposes, though, it's lost to the user until the group is no longer live. It's a kind of "memory bloat" that happens if we group our allocations.</p>
<p>To handle this, we'll need some way of recycling that memory. I say "recycling" specifically because in June we can't free the memory, as the group is treated together as a single entity where all the allocations in the group are freed at once. If we instead recycle the memory, we can reuse that same memory while the group is live.</p>
<p>Techniques to do this have been around for decades, and often people use "free lists" to keep a list of nodes that have been recycled, so they can be reused when the next allocation happens.</p>
<p>The problem with free lists is that they aren't safe. If you're not careful, you'll create a security vulnerability and/or an incredibly hard bug to find.</p>
<p>Instead, we need to build in a safe way of recycling memory into the language.</p>
<h2 id="safe-memory-recycling">Safe memory recycling</h2>
<p>Using the idea of full encapsulation from earlier, we can create "fenced in" sets of pointers that we know aren't shared with the rest of the world. Once we have them, it's possible to track the pointers inside. These pointers can get a "copy count", so we know how many copies are live at any point in time (not dissimilar from a refcount, though this has no automatic reclamation).</p>
<p>Once we have a copy count for each internal pointer, we can give developers a built-in <code>recycle</code> command.</p>
<pre>
<code><span>let x = new Foo()
recycle x
</span></code></pre>
<p>Recycling would start at the given pointer and would check the pointers reachable from it. Each pointer it finds that it can recycle would go into the safe free list.</p>
<p>You might wonder "why not do this automatically?". There are a couple reasons:</p>
<ul>
<li>The operation is linear time based on your transitively-reachable pointers. This means you may incur a noticeable overhead when recycling</li>
<li>Because of the first point, it's important to make places where this occurs visible</li>
</ul>
<p>If this sounds like a kind of manual garbage collection, you're right. My collaborator Jane calls this "semi-automatic" memory reclamation. You ask once, and when you ask you get a kind of highly focused mark and sweep for that single pointer and the pointers reachable from it.</p>
<p><em>Note: this feature is not yet in the reference compiler. We're hoping to implement it in the coming weeks.</em></p>
<h2 id="more-work-ahead">More work ahead</h2>
<p>We have a way of simplifying lifetimes, making for readable code that people from various languages should be able to understand and use. We can also give clear, easy-to-understand lifetime errors when they arise.</p>
<p>Having safe memory recycling gives us a way to keep groups and still offer things like <code>delete</code> in a linked list abstraction. It's convenient but not so automatic that we lose the visibility into the costs of memory management.</p>
<p>That said, there are still some challenge ahead that will need to be solved in the language design and tooling. For example, how do you know when the program is bloating memory? We'll need some way of doing a memory trace when the program is running to detect this and warn the developer.</p>
<p>I see this in a way as a more incremental/prototype-friendly way of development. June is always memory safe, but the first version of a program may not be as efficient as it could be in terms of memory usage. That's a process we often go through as developers. First, we "make it work" before we "make it good".</p>
<p>In June, we keep it lightweight as we keep your programs memory safe, and then we provide tools and support for incrementally improving code.</p>
<h2 id="future-possibilities">Future possibilities</h2>
<h3 id="relationship-to-rust">Relationship to Rust</h3>
<p>June has a real opportunity to be a good complement to Rust. Rust's focus on embedded and system's development is a core strength. June, on the other hand, has a lean towards application development with a system's approach. This lets both co-exist and offer safe systems programming to a larger audience.</p>
<p>An even better end state requires Rust to have a stable ABI. Once it does, June will be able to call into Rust crates to get the benefits of Rust's substantial crate ecosystem. We're looking forward to collaborating on this in the future.</p>
<h3 id="going-beyond-oop">Going beyond OOP</h3>
<p>OOP has for decades been the way many applications are written, but it's not without its flaws. Many OOP languages allow programmers to freely break good rules of thumb, like the Liskov substitution principle, or to create a mess of interwoven code between parent and child classes that's difficult to maintain.</p>
<p>We're currently investigating other ways of making code reuse easier, more modular, and more composible. We're not quite ready to talk about this, though we hope to soon.</p>
<p>Over the years, there have been a <a target="_blank" href="https://verdagon.dev/grimoire/grimoire">number of memory management techniques tried</a>, including many that lie outside of the ones commonly found in languages today. We'd like to explore these more deeply to see which, if any, may help June.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We had the help of dozens of experts in various fields as we brainstormed the initial design for June, and for their contributions, we're thankful. We'd especially like to thank the collaborators who went above and beyond with their time across multiple brainstorming sessions to help June grow to where it is.</p>
<ul>
<li>Andreas Kling</li>
<li>Doug Gregor</li>
<li>Jason Turner</li>
<li>Mads Torgersen</li>
<li>Mae Milano</li>
<li>Steve Francia</li>
</ul>
<p>Also, special thanks to our private beta testers for testing out June and giving us feedback.</p>
<h2 id="checking-it-out">Checking it out</h2>
<p>Documentation on the June language and the June reference compiler are now available via the <a target="_blank" href="https://github.com/sophiajt/june">June repo</a>.</p>
<p>Please note: the reference compiler is pre-alpha quality.</p>
  </div>]]></content:encoded>
			</item>
			<item>
			<title>Why SQLite Uses Bytecode</title>
			<description>1. Introduction Every SQL database engine works in roughly the same way:  It first translates the input SQL text into a &quot;prepared statement&quot;.  Then it &quot;executes&quot; the prepared statement to generate a...</description>
			<link>https://sqlite.org/draft/whybytecode.html</link>
			<content:encoded><![CDATA[<div>
<h2 id="introduction"><span>1. </span>Introduction</h2>
<p>Every SQL database engine works in roughly the same way:  It first 
translates the input SQL text into a "prepared statement".  Then it "executes"
the prepared statement to generate a result.
</p><p>A prepared statement is an object that represents the steps needed
to accomplish the input SQL.  Or, to think of it in another way,
the prepared statement is the SQL statement translated into a form that is
more easily understood by the computer.
</p><p>In SQLite, a prepared statement is an instance of the
<a target="_blank" href="https://sqlite.org/draft/c3ref/stmt.html">sqlite3_stmt object</a>.  In other systems, the prepared
statement is usually an internal data structure that is not directly visible to
the application programmer.  Developers of other SQL database engines
do not necessarily call these objects "prepared statements".
But such objects exists, whatever they might be called.
This paper will use the term "prepared statement".
</p><p>There are countless ways of implementing a prepared statement.  This
paper will look at the two most common methods:
</p><ol>
<li><p>
<b>Bytecode</b> →  The input SQL is translated into a virtual machine language
that is then run by a virtual machine interpreter.  This is the technique
used by SQLite.
</p></li><li><p>
<b>Tree-Of-Objects</b> → The input SQL is translated in a tree of objects
that represent the processing to be done.  The SQL is executed by walking this
tree.  This is the technique used by MySQL and PostgreSQL.
</p></li></ol>
<p>
There are advantages and disadvantages to each of these representations of
a prepared statement.  The purpose of this paper is to articulate some of those
advantages and disadvantages.
</p><h2 id="how_to_provide_feedback"><span>1.1. </span>How To Provide Feedback</h2>
<p>
This document is written from the perspective of the original author of SQLite.
If you disagree with any of the opinions offered in this document, you are
welcomed to offer corrections and/or contrary views on the
<a target="_blank" href="https://sqlite.org/forum">SQLite Forum</a>.  Or you can email the author
directly.
</p><h2 id="definition_of_bytecode_"><span>1.2. </span>Definition Of "Bytecode"</h2>
<p>The <a target="_blank" href="https://sqlite.org/draft/opcode.html">bytecode generated by SQLite</a> might be a little different from what
many readers think of as bytecode.  The bytecode used (for example) by the
<a target="_blank" href="https://en.wikipedia.org/wiki/Java_virtual_machine">Java virtual machine</a> or
by <a target="_blank" href="https://en.wikipedia.org/wiki/WebAssembly">WebAssembly</a> consists almost
entirely of low-level operations, similar to what physical CPUs implement:
basic math operators, comparisons, conditional jumps, and
instructions to move content between different memory locations.  SQLite bytecode
has these kinds of low-level instructions, too.  But SQLite bytecode also contains
some high-level operations that are specific to the needs of a database engine.
Here are just a few examples:
</p><ul>
<li><p><b>OP_Column</b> → Extract the value from the N-th column of the
database row that a particular cursor is currently pointing at.
</p></li><li><p><b>OP_CreateBtree</b> → Allocate space for a new B-Tree in the
database file.
</p></li><li><p><b>OP_ParseSchema</b> → Reread and reparse all or part of the
<a target="_blank" href="https://sqlite.org/draft/schematab.html">sqlite_schema table</a> and refresh internal symbol tables accordingly.
</p></li><li><p><b>OP_SeekGE</b> → Move a cursor on a particular B-Tree to the first
entry that is greater than or equal to a given key.
</p></li><li><p><b>OP_Next</b> → Advance a cursor on a particular B-Tree to the next
entry in the B-Tree and jump, or fall through if there are no more entries in that
B-Tree.
</p></li></ul>
<p>In other words, the "bytecode" used by SQLite is not so much a set of CPU
instructions as it is a list of database primitives that are to be run
in a particular order.
</p><h2 id="definition_of_abstract_syntax_tree_or_ast_"><span>1.3. </span>Definition Of "Abstract Syntax Tree" or "AST"</h2>
<p>
An "<a target="_blank" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>" or AST
is a data structure that describes a program or statement in some kind of formal
language.  In our context, the formal language is SQL.  An AST is typically
implemented as a tree of objects where each object represents one small part of
the overall SQL statement.  ASTs emerge naturally from parsers for formal languages.
The usual technique is to use an 
<a target="_blank" href="https://en.wikipedia.org/wiki/LALR_parser">LALR(1) parser</a>.
With such a parser, each terminal
symbol holds metadata that will become a leaf of the AST, and each non-terminal 
symbol holds metadata that will become a sub-branch of the overall AST.
As rules of the grammar are "reduced" by the parser, new nodes of the AST are
allocated and connected to subnodes.
After the parse completes, the start-symbol of the grammar is left holding the
root of the AST.
</p><p>An AST is a tree of objects.  But an AST is not a suitable form for
a prepared statement.  After being generated, an AST first needs to be
transformed in various ways before it can executed.  Symbols need to be
resolved.  Semantic rules need to be checked.  Optimizations need to be
applied that transform input SQL statement into different forms that
execute more quickly.  Finally, the AST needs to be translated into an
alternative representation that is more amenable to execution.
</p><p>Some people refer to the tree of objects that is used as the
executable form for MySQL and PostgreSQL as an AST.  This is probably a
misuse of the term "AST", because by the time the tree of objects is
ready to be executed, it has been changed so much that it has little
resemblance to the original SQL text.  The confusion arises in part because
both the final prepared statement object and the original AST are both
trees of objects.  The usual technique is for the original AST that comes
directly out of the parser to be transformed little by little, in multiple
passes, until at the end it is fully converted into an tree of objects
that is no longer strictly an AST but that can be evaluated to
generate a result.  There is not necessarily a clear point during this
process when the tree-of-objects ceases to be an AST and becomes a
prepared statement instead.  And because there is no clear boundary between an
AST and a prepared statement, people often refer to a prepared statement
that is represented as a tree of objects as an "AST", even though that
description is not precise.
</p><h2 id="dataflow_programming"><span>1.4. </span>Dataflow Programming</h2>
<p><a target="_blank" href="https://en.wikipedia.org/wiki/Dataflow_programming">Dataflow programming</a>
is a style of programming in which individual nodes specialize in doing
one small part of the overall computation.  Each node receives inputs from 
other nodes and sends its output to other nodes.  Thus the nodes form a
directed graph that carry inputs into outputs.
</p><p>
A "dataflow program" is perhaps a better description than "AST" for
the tree of objects that an SQL database engine uses as a prepared statement.
</p><h2 id="advantages_to_compiling_into_bytecode"><span>2. </span>Advantages To Compiling Into Bytecode</h2>
<p>SQLite compiles to bytecode, and the SQLite developers are very happy
with this approach.  Here is why:
</p><h2 id="bytecode_is_easier_to_understand"><span>2.1. </span>Bytecode Is Easier To Understand</h2>
<p>A flat list of opcodes can be easily printed to see exactly
how an SQL statement is being implemented.  This is what happens in SQLite
when you preface an SQL statement with the "EXPLAIN" keyword:  Instead of
actually running the SQL, the result is a listing of the bytecode
that would have been used to implement that SQL.
</p><p>Bytecode lends itself to this because a bytecode program is easily
represented as a table.  In SQLite bytecode, each instruction
has one opcode and five operands.  Thus a prepared statement can be
rendered as if it were a query against a six-column table.
</p><p>A tree-of-objects representation is more difficult to publish in
a human-readable form.  The objects that comprise the tree tend to
all be very different, and thus it is tricky to come up with a 
consistent and simple table representation with which to display
the objects.  Any such table representation that you do come up
with would almost certainly have more than six columns, probably many more.
The problem of rendering a tree-of-objects as a table is sufficiently
difficult that nobody does it, as far as I know.  Hence, no
tree-of-objects database engine provides the level
of detail in their "EXPLAIN" output that SQLite provides.
</p><h2 id="bytecode_is_easier_to_debug"><span>2.2. </span>Bytecode Is Easier To Debug</h2>
<p>Bytecode provides a clear separation between front-end parsing and
analysis and back-end evaluation of an SQL statement.  When problems arise
(incorrect answers and/or poor performance), the developers can examine
the bytecode to quickly determine if the source of the trouble is either the
front-end analysis or the back-end data storage section of the product.
</p><p>In debugging builds of SQLite, the <a target="_blank" href="https://sqlite.org/draft/pragma.html#pragma_vdbe_trace">PRAGMA vdbe_trace=ON;</a> command will
cause a trace of the bytecode execution to appear on the console.
</p><h2 id="bytecode_can_be_run_incrementally"><span>2.3. </span>Bytecode Can Be Run Incrementally</h2>
<p>
SQL statements written in bytecode can be evaluated incrementally.
For example, a statement can be run until it generates just its first
row of output.  The statement then pauses until it is stepped again.
It is not necessary to run the statement to completion before examining
the first row of output.
</p><p>
This is more difficult to achieve in a tree-of-objects design.  When
the prepared statement is a tree-of-objects, execution is normally
accomplished by walking the tree.  To pause the statement in the middle
of a computation means unwinding the stack back up to the caller, all
the while saving enough state to resume evaluation where it last left
off.  This is not impossible to do, but is sufficiently difficult that
I have never seen it actually done.
</p><p>
Most SQL database engines do not really need to do incremental
execution of prepared statements because most SQL database engines
are client/server.  In client/server engines, a single SQL statement is sent
to the server, then the complete reply comes back over the wire
all at once.  Thus each statement runs to completion in a single go.
But SQLite is not client/server.  SQLite is a library
that runs in the same address space and using the same stack as the
application.  Being able to easily and reliably perform incremental
execution of an SQL statement is important to SQLite.
</p><h2 id="bytecode_is_smaller"><span>2.4. </span>Bytecode Is Smaller</h2>
<p>
The bytecode generated by SQLite is usually smaller than the corresponding
AST coming out of the parser.  During initial processing of SQL text
(during the call to <a target="_blank" href="https://sqlite.org/draft/c3ref/prepare.html">sqlite3_prepare()</a> and similar) both the AST and the
bytecode exist in memory at the same time, so more memory is used then.
But that is a transient state.  The AST
is quickly discarded and its memory recycled, even before the call to
<a target="_blank" href="https://sqlite.org/draft/c3ref/prepare.html">sqlite3_prepare()</a> returns, so the resulting <a target="_blank" href="https://sqlite.org/draft/c3ref/stmt.html">prepared statement</a> ends
up consuming less memory in its bytecode representation than it did as an AST.
This is important because calls to <a target="_blank" href="https://sqlite.org/draft/c3ref/prepare.html">sqlite3_prepare()</a> are transient, but
prepared statements are often cached for possible reuse and persist in memory
for a long time.
</p><h2 id="bytecode_is_faster"><span>2.5. </span>Bytecode Is Faster</h2>
<p>
I <i>believe</i> that a bytecode representation of a prepared statement
runs faster, because fewer decisions need to be made for each step of
the computation.  Emphasis on "believe" in the previous sentence
→ it is difficult to verify
this claim experimentally since nobody has ever put in the multiple years
of effort necessary to generate equivalent bytecode and tree-of-object
representations of a prepared statement to see which one actually runs faster.
We do know that <a target="_blank" href="https://sqlite.org/draft/fasterthanfs.html">SQLite is very fast</a>, but we
do not have good side-by-side comparisons with other SQL databases since
the other databases spend a lot of time doing client/server message processing,
and it is difficult to untangle the message round-trip overhead from the
actual processing time.
</p><h2 id="advantages_of_compiling_into_a_tree_of_objects"><span>3. </span>Advantages Of Compiling Into A Tree Of Objects</h2>
<p>The SQLite developers think that the bytecode approach is
best, at least for the use cases the SQLite tries to fill, but the
tree-of-objects approach to processing SQL does have some advantages over 
bytecode. There are always tradeoffs.
</p><h2 id="query_planning_decisions_can_be_deferred_until_runtime"><span>3.1. </span>Query Planning Decisions Can Be Deferred Until Runtime</h2>
<p>
When a prepared statement is bytecode, once the bytecode has been generated,
the algorithm is fixed and cannot be subsequently changed without completely
rewriting the bytecode.
This is not the case with a tree-of-objects prepared
statement.  A tree-of-objects is easier to modify on-the-fly.  The query
plan is mutable and can be tweaked as it is running, based on the progress
of the query.  Thus a query can be dynamically self-tuning.
</p><h2 id="dataflow_programs_are_easy_to_parallelize"><span>3.2. </span>Dataflow Programs Are Easy To Parallelize</h2>
<p>In a dataflow program, each processing node can be assigned to a
different thread.  There needs to be some kind of threadsafe queuing
mechanism for transferring intermediate results from one node to the
next.  But no synchronization primitives are typically needed within
each node of the program.  Node schedule is trivial:  A node becomes
eligible to run when it has data available and there is space in its
output queue.
</p><p>This is an important consideration for database engines that are
designed to run large analytic queries 
(<a target="_blank" href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a>)
on large multi-core servers.
The primary focus of SQLite is transaction processing 
(<a target="_blank" href="https://en.wikipedia.org/wiki/Online_transaction_processing">OLTP</a>) 
on the internet-of-things, so there is less need to
represent prepared statements as dataflow programs in SQLite.
</p><p><small><i>This page last modified on  <a target="_blank" href="https://sqlite.org/docsrc/honeypot">2024-05-09 17:38:03</a> UTC </i></small></p>
<p><span>*** DRAFT ***</span></p>
</div>]]></content:encoded>
			</item>
			<item>
			<title>Turns out the Rabbit R1 was just an Android app all along</title>
			<description>Turns out the Rabbit R1 was just an Android app all along &#x2F; AI is in its Juicero era.By  Allison Johnson, a reviewer with 10 years of experience writing about consumer tech. She has a special interest in...</description>
			<link>https://www.theverge.com/2024/4/30/24145838/rabbit-r1-android-app-pixel-6a</link>
			<content:encoded><![CDATA[<div><article><div><div><div><h2>Turns out the Rabbit R1 was just an Android app all along</h2><p><span><span> / </span><h2>AI is in its Juicero era.</h2></span></p></div><div><p><span>By</span> <span><span></span> <span><a target="_blank" href="https://www.theverge.com/authors/allison-johnson">Allison Johnson</a></span><span>, <span>a reviewer with 10 years of experience writing about consumer tech. She has a special interest in mobile photography and telecom. Previously, she worked at DPReview.</span></span></span></p><p>Updated May 1, 2024, 3:23 AM UTC</p><div><h2>Share this story</h2></div><p>If you buy something from a Verge link, Vox Media may earn a commission. <a target="_blank" href="https://www.theverge.com/ethics-statement">See our ethics statement.</a></p></div></div><div><figure><span><span></span><img alt="The Rabbit R1 in front of a window." srcset="https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/16x11/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 16w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/32x21/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 32w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/48x32/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 48w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/64x43/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 64w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/96x64/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 96w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/128x85/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 128w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/256x171/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 256w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/376x251/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 376w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/384x256/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 384w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/415x277/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 415w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/480x320/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 480w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/540x360/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 540w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/640x427/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 640w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/750x500/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 750w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/828x552/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 828w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/1080x720/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 1080w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/1200x800/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 1200w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/1440x960/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 1440w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/1920x1280/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 1920w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/2048x1365/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 2048w, https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/2400x1600/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG 2400w" src="https://duet-cdn.vox-cdn.com/thumbor/0x0:6000x4000/2400x1600/filters:focal(3000x2000:3001x2001):format(webp)/cdn.vox-cdn.com/uploads/chorus_asset/file/25415491/DSC08587.JPG" /></span><div><figcaption><em>I mean, at least it’s just $200?</em></figcaption> <p>Image: David Pierce / The Verge</p></div></figure></div></div><div><div><p>Over at <em>Android Authority, </em>Mishaal Rahman managed to <a target="_blank" href="https://www.androidauthority.com/rabbit-r1-is-an-android-app-3438805/">download Rabbit’s launcher APK on a Google Pixel 6A</a>. With a little tweaking, he was able to run the app as if it were on Rabbit’s own device. Using the volume-up key in place of the R1’s single hardware button, he was able to set up an account and start asking it questions, just as if he was using the $199 R1. </p><p>Oh boy. </p><p>Rahman points out that the app probably doesn’t offer all of the same functionality as the R1. In his words: “the Rabbit R1’s launcher app is intended to be preinstalled in the firmware and be granted several privileged, system-level permissions — only some of which we were able to grant — so some of the functions would likely fail if we tried.” But the fact that the software runs on a midrange phone from almost two years ago suggests that it has more in common with a plain ‘ol Android app than not. </p><p>Rabbit founder and CEO Jesse Lyu disagrees with this characterization. He gave a lengthy statement to <em>The Verge </em>that we’ve partially quoted below — it was <a target="_blank" href="https://twitter.com/rabbit_hmi/status/1785498453097009473?t=nDKpTRwNIuGV285GDT2Ajg&amp;s=19">also posted to Rabbit’s X account</a> if you want to read it in full. </p><div><blockquote><p>“rabbit r1 is not an Android app... rabbit OS and LAM run on the cloud with very bespoke AOSP and lower level firmware modifications, therefore a local bootleg APK without the proper OS and Cloud endpoints won’t be able to access our service. rabbit OS is customized for r1 and we do not support third-party clients.” </p></blockquote></div><p>The R1 isn’t alone; Humane’s AI pin <a target="_blank" href="https://www.threads.net/@marvinbernal/post/CzhAJ1hxktP/?igshid=NTc4MTIwNjQ2YQ%3D%3D">appears to run on a version</a> of Android’s open-source software, too. But it’s the R1 in the hot seat right now as the first reviews have started to trickle out — and <a target="_blank" href="https://go.skimresources.com/?id=1025X1701640&amp;xs=1&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DddTV12hErTc">they’re not great, Bob</a>. Rabbit issued <a target="_blank" href="https://www.theverge.com/2024/4/30/24145442/rabbit-r1-ota-software-update-battery-drain-fix">its first software update</a> earlier today to address some complaints, including a fast-draining battery. <em>That</em> issue seems to be better controlled post-update; my R1’s idle battery performance is vastly improved after downloading the update this morning.</p><p>But the bigger problem is that the R1 just doesn’t do enough useful things to justify its existence when, you know, <em>phones</em> exist. It looks like this AI gadget <a target="_blank" href="https://www.theverge.com/2024/4/21/24134967/ai-gadgets-humane-pin-android-pixel-gemini">could have just been an app</a> after all.</p><p><em><strong>Update April 30th 11:23PM ET: </strong>Added a statement from Rabbit CEO Jesse Lyu.</em></p></div><div><p>Most Popular</p><p>Most Popular</p><ol><li><a target="_blank" href="https://www.theverge.com/2024/5/15/24157284/apple-iphone-ios-17-5-update-deleted-photos-voicemails"><h2>iPhone owners say the latest iOS update is resurfacing deleted nudes</h2></a><hr /></li><li><a target="_blank" href="https://www.theverge.com/2024/5/15/24157154/google-home-api-matter-smart-home-chromecast-google-tv"><h2>Google opens up its smart home to everyone and will make Google TVs home hubs</h2></a><hr /></li><li><a target="_blank" href="https://www.theverge.com/2024/5/15/24156770/quilt-smart-heat-pump-hvac-price-release-date"><h2>Someone finally made a heat pump that looks good inside your home</h2></a><hr /></li><li><a target="_blank" href="https://www.theverge.com/2024/5/14/24085240/lego-barad-dur-lord-of-the-rings-set-sauron"><h2>Lego Barad-dûr revealed: Sauron’s dark tower from The Lord of the Rings is $460</h2></a><hr /></li><li><a target="_blank" href="https://www.theverge.com/2024/5/15/24157529/microsoft-proteus-controller-xbox-accessibility"><h2>Microsoft announces the Proteus Controller, a gamepad for Xbox gamers with disabilities</h2></a><hr /></li></ol></div></div></article></div>]]></content:encoded>
			</item>
			<item>
			<title>900 Sites, 125 million accounts, 1 vulnerability - env.fail</title>
			<description>TLDR: - Firebase allows for easy misconfiguration of security rules with zero warnings - This has resulted in hundreds of sites exposing a total of ~125 Million user records, including plaintext passwords...</description>
			<link>https://env.fail/posts/firewreck-1/</link>
			<content:encoded><![CDATA[<div><article><div><p><strong>TLDR</strong>:</p>
<p>- Firebase allows for easy misconfiguration of security rules with zero warnings</p>
<p>- This has resulted in hundreds of sites exposing a total of ~125 Million user records, including <strong>plaintext passwords</strong> &amp; <strong>sensitive billing information</strong></p>
<hr />
<p>After the initial buzz of <a target="_blank" href="https://mrbruh.com/chattr/">pwning Chattr.ai</a> had settled down, we set to work on <strong>scanning the entire internet</strong> for exposed PII via misconfigured Firebase instances.</p>
<h2>Attempt 1</h2>
<p><a target="_blank" href="https://env.fail/writer/mrbruh">MrBruh</a> wrote up a rudimentary scanner in Python that would check for Firebase configuration variables in websites or their loaded .js bundles.</p>
<p>It worked... until it didn't.</p>
<p>Turns out that a Python program with ~500 threads will start to chew up memory over time. For us that meant it was OOM'ing within an hour of starting it.</p>
<h2>Attempt 2</h2>
<p><a target="_blank" href="https://env.fail/writer/logykk">Logykk</a> rewrote the scanner in Go, unlike the prior it didn't seem to leak memory.</p>
<p>Our initial estimate was that this was going to take ~11 days to scan through the 5 1/2 Million domains, but it turned out to be closer to 2-3 weeks which made this very much a waiting game.</p>
<h2>Manually checking every domain</h2>
<p>We first went and started manually looking at each entry in the 550k line text file, seeing if we could find anything interesting, this was time consuming and very repetitive.</p>
<p>In the end, we went through quite a lot of it and had 136 sites and 6.2 million records, but we all knew that we needed to do something fully automated, because this was taking way too long.</p>
<h2>Catalyst</h2>
<p>Once we had acquired our shortlist of potentially affected sites we ran it through a secondary scanner that <a target="_blank" href="https://env.fail/writer/xyzeva">Eva</a> had made called Catalyst.</p>
<p>This would take the site (or .js bundle) we found, then automatically check for read access to common Firebase collections &amp; any that were explicitly mentioned in the JavaScript itself.</p>
<p>When it found read access to a collection it would attempt to calculate the impact of the exposed data by gathering a sample of 100 records, <strong>checking the type of information contained and extrapolating that by the total size of the collection</strong>.</p>
<p>We then, decided the database to use to store all of these results, and we chose <a target="_blank" href="https://supabase.com/">Supabase</a> (which uses PostgreSQL under the hood) a open source Firebase competitor, just for the irony.</p>
<p>Once all that had been completed the data was formatted and uploaded to a private database table.</p>
<p><img src="https://env.fail/files/img/posts/firewreck-1/supabase_table.png" alt="A database table viewer of data, with the columns of projectId, websiteUrls, allCount, namesCount, emailCount, phoneCount, hashedPwdCount, plaintextPwdCount, billingCount" /></p>
<h2>The Numbers</h2>
<ul>
<li>All (records): 124,605,664</li>
<li>Names: 84,221,169</li>
<li>Emails: 106,266,766</li>
<li>Phone Numbers: 33,559,863</li>
<li>Passwords: 20,185,831</li>
<li>Billing Info (Bank details, invoices, etc): 27,487,924</li>
</ul>
<p>These numbers should be taken with a grain of salt. <strong><em>They are likely larger than shown here.</em></strong></p>
<h2>The Shortlist (of affected sites)</h2>
<h3>1. Silid LMS</h3>
<p><img src="https://env.fail/files/img/posts/firewreck-1/silidlms.png" alt="SilidLMS, a learning platform for teachers" /></p>
<ul>
<li>Learning management system for students &amp; teachers</li>
<li>Most total exposed user records, at <strong>27 Million affected users</strong>. (Names, Emails &amp; Phone numbers)</li>
</ul>
<h3>2. Online gambling network</h3>
<p><img src="https://env.fail/files/img/posts/firewreck-1/gambling_ring.png" alt="Carousel of 6 animal themed login pages, on different websites, all very clearly a look alike" /></p>
<ul>
<li>Comprised of 9 sites which are all reskins of each other.</li>
<li>Some <strong>spins are rigged</strong> to have a 0% chance of winning.</li>
<li>Customer support tried to flirt with me when attempting to report the issue.
<img src="https://env.fail/files/img/posts/firewreck-1/gambling_msgs.png" alt="" /></li>
<li>Contains the <strong>most amount of exposed bank account details (logins) out of all of our records. (8 Million)</strong></li>
<li>Also contains the most plaintext passwords out of all of the affected websites, at <strong>10 Million passwords being exposed</strong>.</li>
</ul>
<h3>3. Lead Carrot</h3>
<p><img src="https://env.fail/files/img/posts/firewreck-1/leadcarrot.png" alt="Online lead company, &quot;Fill your pipeline with accurate leads today&quot;" /></p>
<ul>
<li>Online “lead” generator for cold calling</li>
<li>Top 3 in total amount of exposed user information, sitting at <strong>22 Million affected people</strong>.</li>
</ul>
<h3>4. MyChefTool</h3>
<p><img src="https://env.fail/files/img/posts/firewreck-1/mycheftool.png" alt="&quot;More than just a PoS&quot; top header with &quot;The definitive app for managing your business&quot; main header" /></p>
<ul>
<li>Business management app &amp; Point of Service application for restaurants</li>
<li>1st place for most exposed Names &amp; 2nd place for exposed Emails. <strong>(14 Million &amp; 13 Million respectively)</strong></li>
</ul>
<h2>The aftermath</h2>
<ul>
<li>842 Emails sent over 13 days</li>
<li>85% Emails delivered</li>
<li>9% Emails bounced</li>
<li>24% of Site owners fixed the misconfiguration</li>
<li>1% of Site owners emailed us back</li>
<li>0.2% (2) Sites owners offered a bug bounty</li>
</ul>
</div></article></div>]]></content:encoded>
			</item>
			<item>
			<title>About - env.fail</title>
			<description>env.failHomeAboutAll of the writers have their own about pages, click to see one of them.For journalistic enquiries email us.WritersLogykklogykkCloudflare dislikerMrBruhmrbruhMonero...</description>
			<link>https://env.fail/about</link>
			<content:encoded><![CDATA[<div><a target="_blank" href="https://env.fail/">env.fail</a><a target="_blank" href="https://env.fail/">Home</a><a target="_blank" href="https://env.fail/about">About</a><p>All of the writers have their own about pages, click to see one of them.</p><p>For journalistic enquiries <a target="_blank" href="mailto:journalistic@env.fail">email us.</a></p><p></p><h2>Writers</h2><p></p><div><div><div><p><a target="_blank" href="https://env.fail/writer/logykk/">Logykk</a></p><p>logykk</p></div><p>Cloudflare disliker</p></div><div><div><p><a target="_blank" href="https://env.fail/writer/mrbruh/">MrBruh</a></p><p>mrbruh</p></div><p>Monero millionaire</p></div><div><div><p><a target="_blank" href="https://env.fail/writer/xyzeva/">Eva</a></p><p>xyzeva</p></div><p>Webpack enjoyer</p></div></div></div>]]></content:encoded>
			</item>
	</channel>
</rss>
